// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package ods_material_scrap.main_template_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Main_Template Purpose: Template for PLEX extraction<br>
 * Description: Template Using JUA1 Plex Server <br>
 * @author 
 * @version 8.0.1.20211109_1610
 * @status 
 */
public class Main_Template implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(FileName != null){
				
					this.setProperty("FileName", FileName.toString());
				
			}
			
			if(DestinationPath != null){
				
					this.setProperty("DestinationPath", DestinationPath.toString());
				
			}
			
			if(BusinessFolder != null){
				
					this.setProperty("BusinessFolder", BusinessFolder.toString());
				
			}
			
			if(InitFlag != null){
				
					this.setProperty("InitFlag", InitFlag.toString());
				
			}
			
			if(FileDateTime != null){
				
					this.setProperty("FileDateTime", FileDateTime.toString());
				
			}
			
			if(DB_SQLServer_DWH_AdditionalParams != null){
				
					this.setProperty("DB_SQLServer_DWH_AdditionalParams", DB_SQLServer_DWH_AdditionalParams.toString());
				
			}
			
			if(DB_SQLServer_DWH_Database != null){
				
					this.setProperty("DB_SQLServer_DWH_Database", DB_SQLServer_DWH_Database.toString());
				
			}
			
			if(DB_SQLServer_DWH_Login != null){
				
					this.setProperty("DB_SQLServer_DWH_Login", DB_SQLServer_DWH_Login.toString());
				
			}
			
			if(DB_SQLServer_DWH_Password != null){
				
					this.setProperty("DB_SQLServer_DWH_Password", DB_SQLServer_DWH_Password.toString());
				
			}
			
			if(DB_SQLServer_DWH_Port != null){
				
					this.setProperty("DB_SQLServer_DWH_Port", DB_SQLServer_DWH_Port.toString());
				
			}
			
			if(DB_SQLServer_DWH_Schema != null){
				
					this.setProperty("DB_SQLServer_DWH_Schema", DB_SQLServer_DWH_Schema.toString());
				
			}
			
			if(DB_SQLServer_DWH_Server != null){
				
					this.setProperty("DB_SQLServer_DWH_Server", DB_SQLServer_DWH_Server.toString());
				
			}
			
			if(DB_SQLServer_PLEX_AdditionalParams != null){
				
					this.setProperty("DB_SQLServer_PLEX_AdditionalParams", DB_SQLServer_PLEX_AdditionalParams.toString());
				
			}
			
			if(DB_SQLServer_PLEX_Database != null){
				
					this.setProperty("DB_SQLServer_PLEX_Database", DB_SQLServer_PLEX_Database.toString());
				
			}
			
			if(DB_SQLServer_PLEX_Login != null){
				
					this.setProperty("DB_SQLServer_PLEX_Login", DB_SQLServer_PLEX_Login.toString());
				
			}
			
			if(DB_SQLServer_PLEX_Password != null){
				
					this.setProperty("DB_SQLServer_PLEX_Password", DB_SQLServer_PLEX_Password.toString());
				
			}
			
			if(DB_SQLServer_PLEX_Port != null){
				
					this.setProperty("DB_SQLServer_PLEX_Port", DB_SQLServer_PLEX_Port.toString());
				
			}
			
			if(DB_SQLServer_PLEX_Schema != null){
				
					this.setProperty("DB_SQLServer_PLEX_Schema", DB_SQLServer_PLEX_Schema.toString());
				
			}
			
			if(DB_SQLServer_PLEX_Server != null){
				
					this.setProperty("DB_SQLServer_PLEX_Server", DB_SQLServer_PLEX_Server.toString());
				
			}
			
			if(CurrentDate != null){
				
					this.setProperty("CurrentDate", CurrentDate.toString());
				
			}
			
			if(EndDate != null){
				
					this.setProperty("EndDate", EndDate.toString());
				
			}
			
			if(ErrorDate != null){
				
					this.setProperty("ErrorDate", ErrorDate.toString());
				
			}
			
			if(NbDayExtract != null){
				
					this.setProperty("NbDayExtract", NbDayExtract.toString());
				
			}
			
			if(StartDate != null){
				
					this.setProperty("StartDate", StartDate.toString());
				
			}
			
			if(TALEND_CONF_Directory != null){
				
					this.setProperty("TALEND_CONF_Directory", TALEND_CONF_Directory.toString());
				
			}
			
			if(TALEND_CONF_FileName != null){
				
					this.setProperty("TALEND_CONF_FileName", TALEND_CONF_FileName.toString());
				
			}
			
			if(TALEND_CONF_FileSeparator != null){
				
					this.setProperty("TALEND_CONF_FileSeparator", TALEND_CONF_FileSeparator.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String FileName;
public String getFileName(){
	return this.FileName;
}
public String DestinationPath;
public String getDestinationPath(){
	return this.DestinationPath;
}
public String BusinessFolder;
public String getBusinessFolder(){
	return this.BusinessFolder;
}
public String InitFlag;
public String getInitFlag(){
	return this.InitFlag;
}
public String FileDateTime;
public String getFileDateTime(){
	return this.FileDateTime;
}
public String DB_SQLServer_DWH_AdditionalParams;
public String getDB_SQLServer_DWH_AdditionalParams(){
	return this.DB_SQLServer_DWH_AdditionalParams;
}
public String DB_SQLServer_DWH_Database;
public String getDB_SQLServer_DWH_Database(){
	return this.DB_SQLServer_DWH_Database;
}
public String DB_SQLServer_DWH_Login;
public String getDB_SQLServer_DWH_Login(){
	return this.DB_SQLServer_DWH_Login;
}
public java.lang.String DB_SQLServer_DWH_Password;
public java.lang.String getDB_SQLServer_DWH_Password(){
	return this.DB_SQLServer_DWH_Password;
}
public String DB_SQLServer_DWH_Port;
public String getDB_SQLServer_DWH_Port(){
	return this.DB_SQLServer_DWH_Port;
}
public String DB_SQLServer_DWH_Schema;
public String getDB_SQLServer_DWH_Schema(){
	return this.DB_SQLServer_DWH_Schema;
}
public String DB_SQLServer_DWH_Server;
public String getDB_SQLServer_DWH_Server(){
	return this.DB_SQLServer_DWH_Server;
}
public String DB_SQLServer_PLEX_AdditionalParams;
public String getDB_SQLServer_PLEX_AdditionalParams(){
	return this.DB_SQLServer_PLEX_AdditionalParams;
}
public String DB_SQLServer_PLEX_Database;
public String getDB_SQLServer_PLEX_Database(){
	return this.DB_SQLServer_PLEX_Database;
}
public String DB_SQLServer_PLEX_Login;
public String getDB_SQLServer_PLEX_Login(){
	return this.DB_SQLServer_PLEX_Login;
}
public java.lang.String DB_SQLServer_PLEX_Password;
public java.lang.String getDB_SQLServer_PLEX_Password(){
	return this.DB_SQLServer_PLEX_Password;
}
public String DB_SQLServer_PLEX_Port;
public String getDB_SQLServer_PLEX_Port(){
	return this.DB_SQLServer_PLEX_Port;
}
public String DB_SQLServer_PLEX_Schema;
public String getDB_SQLServer_PLEX_Schema(){
	return this.DB_SQLServer_PLEX_Schema;
}
public String DB_SQLServer_PLEX_Server;
public String getDB_SQLServer_PLEX_Server(){
	return this.DB_SQLServer_PLEX_Server;
}
public String CurrentDate;
public String getCurrentDate(){
	return this.CurrentDate;
}
public String EndDate;
public String getEndDate(){
	return this.EndDate;
}
public String ErrorDate;
public String getErrorDate(){
	return this.ErrorDate;
}
public String NbDayExtract;
public String getNbDayExtract(){
	return this.NbDayExtract;
}
public String StartDate;
public String getStartDate(){
	return this.StartDate;
}
public String TALEND_CONF_Directory;
public String getTALEND_CONF_Directory(){
	return this.TALEND_CONF_Directory;
}
public String TALEND_CONF_FileName;
public String getTALEND_CONF_FileName(){
	return this.TALEND_CONF_FileName;
}
public String TALEND_CONF_FileSeparator;
public String getTALEND_CONF_FileSeparator(){
	return this.TALEND_CONF_FileSeparator;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Main_Template";
	private final String projectName = "ODS_MATERIAL_SCRAP";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Main_Template.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Main_Template.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tContextLoad_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBCommit_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_4Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tWarn_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tWarn_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tRunJob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tDie_2Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError2", 0, "error");
						}
					
					errorCode = null;
					tDie_3Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tWarn_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tWarn_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		


System.out.println("JobName = " + jobName);
System.out.println("Server = " + context.DB_SQLServer_PLEX_Server);
System.out.println("Database = " + context.DB_SQLServer_PLEX_Database);
System.out.println("Properties file => ");
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tRunJob_1Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
    static byte[] commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
    static byte[] commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];

	
			    public String key;

				public String getKey () {
					return this.key;
				}
				
			    public String value;

				public String getValue () {
					return this.value;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
					this.key = readString(dis);
					
					this.value = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.key,dos);
					
					// String
				
						writeString(this.value,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("key="+key);
		sb.append(",value="+value);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
row9Struct row10 = row9;





	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tLogRow_1 = 0;
		

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tContextLoad_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tContextLoad_1", false);
		start_Hash.put("tContextLoad_1", System.currentTimeMillis());
		
	
	currentComponent="tContextLoad_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tContextLoad_1 = 0;
		
	java.util.List<String> assignList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> newPropertyList_tContextLoad_1 = new java.util.ArrayList<String>();
	java.util.List<String> noAssignList_tContextLoad_1 = new java.util.ArrayList<String>();
	int nb_line_tContextLoad_1 = 0;

 



/**
 * [tContextLoad_1 begin ] stop
 */



	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";

	
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */
	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=DEPLOYMENT");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("FileName", context.FileName);
                    paraList_tRunJob_1.add("--context_type " + "FileName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DestinationPath", context.DestinationPath);
                    paraList_tRunJob_1.add("--context_type " + "DestinationPath" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BusinessFolder", context.BusinessFolder);
                    paraList_tRunJob_1.add("--context_type " + "BusinessFolder" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("InitFlag", context.InitFlag);
                    paraList_tRunJob_1.add("--context_type " + "InitFlag" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FileDateTime", context.FileDateTime);
                    paraList_tRunJob_1.add("--context_type " + "FileDateTime" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_DWH_AdditionalParams", context.DB_SQLServer_DWH_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_DWH_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_DWH_Database", context.DB_SQLServer_DWH_Database);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_DWH_Database" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_DWH_Login", context.DB_SQLServer_DWH_Login);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_DWH_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_DWH_Password", context.DB_SQLServer_DWH_Password);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_DWH_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_DWH_Port", context.DB_SQLServer_DWH_Port);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_DWH_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_DWH_Schema", context.DB_SQLServer_DWH_Schema);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_DWH_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_DWH_Server", context.DB_SQLServer_DWH_Server);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_DWH_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_PLEX_AdditionalParams", context.DB_SQLServer_PLEX_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_PLEX_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_PLEX_Database", context.DB_SQLServer_PLEX_Database);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_PLEX_Database" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_PLEX_Login", context.DB_SQLServer_PLEX_Login);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_PLEX_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_PLEX_Password", context.DB_SQLServer_PLEX_Password);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_PLEX_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_PLEX_Port", context.DB_SQLServer_PLEX_Port);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_PLEX_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_PLEX_Schema", context.DB_SQLServer_PLEX_Schema);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_PLEX_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("DB_SQLServer_PLEX_Server", context.DB_SQLServer_PLEX_Server);
                    paraList_tRunJob_1.add("--context_type " + "DB_SQLServer_PLEX_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CurrentDate", context.CurrentDate);
                    paraList_tRunJob_1.add("--context_type " + "CurrentDate" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("EndDate", context.EndDate);
                    paraList_tRunJob_1.add("--context_type " + "EndDate" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ErrorDate", context.ErrorDate);
                    paraList_tRunJob_1.add("--context_type " + "ErrorDate" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("NbDayExtract", context.NbDayExtract);
                    paraList_tRunJob_1.add("--context_type " + "NbDayExtract" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("StartDate", context.StartDate);
                    paraList_tRunJob_1.add("--context_type " + "StartDate" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TALEND_CONF_Directory", context.TALEND_CONF_Directory);
                    paraList_tRunJob_1.add("--context_type " + "TALEND_CONF_Directory" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TALEND_CONF_FileName", context.TALEND_CONF_FileName);
                    paraList_tRunJob_1.add("--context_type " + "TALEND_CONF_FileName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TALEND_CONF_FileSeparator", context.TALEND_CONF_FileSeparator);
                    paraList_tRunJob_1.add("--context_type " + "TALEND_CONF_FileSeparator" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = jobName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param jobMain=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				paraList_tRunJob_1.add("--context_param jobMain=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
			}
		} else {
			paraList_tRunJob_1.add("--context_param jobMain=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("jobMain", obj_tRunJob_1);
	
	
		ods_material_scrap.load_context_0_1.Load_context childJob_tRunJob_1 = new ods_material_scrap.load_context_0_1.Load_context();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }
			for (String[] item_tRunJob_1 : childReturn_tRunJob_1) { 
				if(childJob_tRunJob_1.hastBufferOutputComponent() || true){
			    			
						if(0 < item_tRunJob_1.length){				
			           		
				           		row9.key = item_tRunJob_1[0];
			           		
		           		}else{
			           		row9.key = null;
		           		}
							
						if(1 < item_tRunJob_1.length){				
			           		
				           		row9.value = item_tRunJob_1[1];
			           		
		           		}else{
			           		row9.value = null;
		           		}
					
				}
		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */

	
	/**
	 * [tContextLoad_1 main ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					
        //////////////////////////
        String tmp_key_tContextLoad_1 = null;
                    String key_tContextLoad_1 = null;
                      if (row9.key != null){
                          tmp_key_tContextLoad_1 = row9.key.trim();
                        if ((tmp_key_tContextLoad_1.startsWith("#") || tmp_key_tContextLoad_1.startsWith("!") )){
                          tmp_key_tContextLoad_1 = null;
                        } else {
                          row9.key = tmp_key_tContextLoad_1;
                        }
                      }
                        if(row9.key != null) {
                    key_tContextLoad_1 =
                        row9.key;
                        }
                    String value_tContextLoad_1 = null;
                        if(row9.value != null) {
                    value_tContextLoad_1 =
                        row9.value;
                        }
				
				String currentValue_tContextLoad_1 = value_tContextLoad_1;
										
						if ((key_tContextLoad_1 != null) && ("DB_SQLServer_DWH_Password".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");						
						if ((key_tContextLoad_1 != null) && ("DB_SQLServer_PLEX_Password".equals(key_tContextLoad_1)) ) currentValue_tContextLoad_1 = currentValue_tContextLoad_1.replaceAll(".", "*");

  if (tmp_key_tContextLoad_1 != null){
  try{
        if(key_tContextLoad_1!=null && "FileName".equals(key_tContextLoad_1))
        {
           context.FileName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DestinationPath".equals(key_tContextLoad_1))
        {
           context.DestinationPath=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "BusinessFolder".equals(key_tContextLoad_1))
        {
           context.BusinessFolder=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "InitFlag".equals(key_tContextLoad_1))
        {
           context.InitFlag=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "FileDateTime".equals(key_tContextLoad_1))
        {
           context.FileDateTime=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_DWH_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_DWH_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_DWH_Database".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_DWH_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_DWH_Login".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_DWH_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_DWH_Password".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_DWH_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_DWH_Port".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_DWH_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_DWH_Schema".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_DWH_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_DWH_Server".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_DWH_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_PLEX_AdditionalParams".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_PLEX_AdditionalParams=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_PLEX_Database".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_PLEX_Database=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_PLEX_Login".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_PLEX_Login=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_PLEX_Password".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_PLEX_Password=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_PLEX_Port".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_PLEX_Port=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_PLEX_Schema".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_PLEX_Schema=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "DB_SQLServer_PLEX_Server".equals(key_tContextLoad_1))
        {
           context.DB_SQLServer_PLEX_Server=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "CurrentDate".equals(key_tContextLoad_1))
        {
           context.CurrentDate=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "EndDate".equals(key_tContextLoad_1))
        {
           context.EndDate=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "ErrorDate".equals(key_tContextLoad_1))
        {
           context.ErrorDate=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "NbDayExtract".equals(key_tContextLoad_1))
        {
           context.NbDayExtract=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "StartDate".equals(key_tContextLoad_1))
        {
           context.StartDate=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "TALEND_CONF_Directory".equals(key_tContextLoad_1))
        {
           context.TALEND_CONF_Directory=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "TALEND_CONF_FileName".equals(key_tContextLoad_1))
        {
           context.TALEND_CONF_FileName=value_tContextLoad_1;
        }

        if(key_tContextLoad_1!=null && "TALEND_CONF_FileSeparator".equals(key_tContextLoad_1))
        {
           context.TALEND_CONF_FileSeparator=value_tContextLoad_1;
        }


        if (context.getProperty(key_tContextLoad_1)!=null)
        {
            assignList_tContextLoad_1.add(key_tContextLoad_1);
        }else  {
            newPropertyList_tContextLoad_1.add(key_tContextLoad_1);
        }
        if(value_tContextLoad_1 == null){
            context.setProperty(key_tContextLoad_1, "");
        }else{
            context.setProperty(key_tContextLoad_1,value_tContextLoad_1);
        }
    }catch(java.lang.Exception e){
globalMap.put("tContextLoad_1_ERROR_MESSAGE",e.getMessage());
        System.err.println("Setting a value for the key \"" + key_tContextLoad_1 + "\" has failed. Error message: " + e.getMessage());
    }
        nb_line_tContextLoad_1++;
    }
        //////////////////////////

 
     row10 = row9;


	tos_count_tContextLoad_1++;

/**
 * [tContextLoad_1 main ] stop
 */
	
	/**
	 * [tContextLoad_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_begin ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row10.key != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row10.key)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row10.value != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row10.value)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tLogRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 process_data_end ] stop
 */



	
	/**
	 * [tContextLoad_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 process_data_end ] stop
 */


	
		} // C_01
	
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */
	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */

	
	/**
	 * [tContextLoad_1 end ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	
	
	java.util.Enumeration<?> enu_tContextLoad_1 = context.propertyNames();
    while(enu_tContextLoad_1.hasMoreElements())
    {           
    	String key_tContextLoad_1 = (String)enu_tContextLoad_1.nextElement();
        if(!assignList_tContextLoad_1.contains(key_tContextLoad_1) && !newPropertyList_tContextLoad_1.contains(key_tContextLoad_1))
        {
            noAssignList_tContextLoad_1.add(key_tContextLoad_1);
        }          
    } 

    String newPropertyStr_tContextLoad_1 = newPropertyList_tContextLoad_1.toString();
    String newProperty_tContextLoad_1 = newPropertyStr_tContextLoad_1.substring(1, newPropertyStr_tContextLoad_1.length() - 1);
    
    String noAssignStr_tContextLoad_1 = noAssignList_tContextLoad_1.toString();
    String noAssign_tContextLoad_1 = noAssignStr_tContextLoad_1.substring(1, noAssignStr_tContextLoad_1.length() - 1);
    
    globalMap.put("tContextLoad_1_KEY_NOT_INCONTEXT", newProperty_tContextLoad_1);
    globalMap.put("tContextLoad_1_KEY_NOT_LOADED", noAssign_tContextLoad_1);

    globalMap.put("tContextLoad_1_NB_LINE",nb_line_tContextLoad_1);

	List<String> parametersToEncrypt_tContextLoad_1 = new java.util.ArrayList<String>();
	
		parametersToEncrypt_tContextLoad_1.add("DB_SQLServer_DWH_Password");
		
		parametersToEncrypt_tContextLoad_1.add("DB_SQLServer_PLEX_Password");
		
	
	resumeUtil.addLog("NODE", "NODE:tContextLoad_1", "", Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt_tContextLoad_1));    
    
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tContextLoad_1", true);
end_Hash.put("tContextLoad_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tDBConnection_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tContextLoad_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tJava_3Process(globalMap);



/**
 * [tLogRow_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";

	

 



/**
 * [tRunJob_1 finally ] stop
 */

	
	/**
	 * [tContextLoad_1 finally ] start
	 */

	

	
	
	currentComponent="tContextLoad_1";

	

 



/**
 * [tContextLoad_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";

	
		int tos_count_tJava_3 = 0;
		


System.out.println("End properties file ");
System.out.println("");
 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";

	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_2", false);
		start_Hash.put("tDBConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_2";

	
		int tos_count_tDBConnection_2 = 0;
		
	

	
			String url_tDBConnection_2 = "jdbc:jtds:sqlserver://" + context.DB_SQLServer_PLEX_Server ;
		String port_tDBConnection_2 = context.DB_SQLServer_PLEX_Port;
		String dbname_tDBConnection_2 = context.DB_SQLServer_PLEX_Database ;
    	if (!"".equals(port_tDBConnection_2)) {
    		url_tDBConnection_2 += ":" + context.DB_SQLServer_PLEX_Port;
    	}
    	if (!"".equals(dbname_tDBConnection_2)) {
    		
				url_tDBConnection_2 += "//" + context.DB_SQLServer_PLEX_Database; 
    	}

		url_tDBConnection_2 += ";appName=" + projectName + ";" + context.DB_SQLServer_PLEX_AdditionalParams;  
	String dbUser_tDBConnection_2 = context.DB_SQLServer_PLEX_Login;
	
	
		
	final String decryptedPassword_tDBConnection_2 = context.DB_SQLServer_PLEX_Password; 
		String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;
	
	
	java.sql.Connection conn_tDBConnection_2 = null;
	
		
			String driverClass_tDBConnection_2 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
			globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);
		
			conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2,dbUser_tDBConnection_2,dbPwd_tDBConnection_2);

		globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
	if (null != conn_tDBConnection_2) {
		
			conn_tDBConnection_2.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_2", context.DB_SQLServer_PLEX_Schema);

	globalMap.put("db_tDBConnection_2",  context.DB_SQLServer_PLEX_Database);
	
	globalMap.put("shareIdentitySetting_tDBConnection_2",  false);

	globalMap.put("driver_tDBConnection_2", "JTDS");

 



/**
 * [tDBConnection_2 begin ] stop
 */
	
	/**
	 * [tDBConnection_2 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 


	tos_count_tDBConnection_2++;

/**
 * [tDBConnection_2 main ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_2 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 

ok_Hash.put("tDBConnection_2", true);
end_Hash.put("tDBConnection_2", System.currentTimeMillis());




/**
 * [tDBConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tWarn_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_2";

	

 



/**
 * [tDBConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";

	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

	try {
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("DB PLEX Database connection KO");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "DB PLEX Database connection KO");
	globalMap.put("tDie_2_DIE_MESSAGES", "DB PLEX Database connection KO");
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_2_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";

	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_1", false);
		start_Hash.put("tWarn_1", System.currentTimeMillis());
		
	
	currentComponent="tWarn_1";

	
		int tos_count_tWarn_1 = 0;
		

 



/**
 * [tWarn_1 begin ] stop
 */
	
	/**
	 * [tWarn_1 main ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_1", "", Thread.currentThread().getId() + "", "WARN","","DB PLEX connection open","", "");
	globalMap.put("tWarn_1_WARN_MESSAGES", "DB PLEX connection open"); 
	globalMap.put("tWarn_1_WARN_PRIORITY", 4);
	globalMap.put("tWarn_1_WARN_CODE", 42);
	
} catch (Exception e_tWarn_1) {
globalMap.put("tWarn_1_ERROR_MESSAGE",e_tWarn_1.getMessage());
	logIgnoredError(String.format("tWarn_1 - tWarn failed to log message due to internal error: %s", e_tWarn_1), e_tWarn_1);
}


 


	tos_count_tWarn_1++;

/**
 * [tWarn_1 main ] stop
 */
	
	/**
	 * [tWarn_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 process_data_end ] stop
 */
	
	/**
	 * [tWarn_1 end ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 

ok_Hash.put("tWarn_1", true);
end_Hash.put("tWarn_1", System.currentTimeMillis());




/**
 * [tWarn_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_1 finally ] start
	 */

	

	
	
	currentComponent="tWarn_1";

	

 



/**
 * [tWarn_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + context.DB_SQLServer_DWH_Server ;
		String port_tDBConnection_1 = context.DB_SQLServer_DWH_Port;
		String dbname_tDBConnection_1 = context.DB_SQLServer_DWH_Database ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + context.DB_SQLServer_DWH_Port;
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + context.DB_SQLServer_DWH_Database; 
    	}

		url_tDBConnection_1 += ";appName=" + projectName + ";" + context.DB_SQLServer_DWH_AdditionalParams;  
	String dbUser_tDBConnection_1 = context.DB_SQLServer_DWH_Login;
	
	
		
	final String decryptedPassword_tDBConnection_1 = context.DB_SQLServer_DWH_Password; 
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", context.DB_SQLServer_DWH_Schema);

	globalMap.put("db_tDBConnection_1",  context.DB_SQLServer_DWH_Database);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

	globalMap.put("driver_tDBConnection_1", "JTDS");

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tWarn_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_5", false);
		start_Hash.put("tWarn_5", System.currentTimeMillis());
		
	
	currentComponent="tWarn_5";

	
		int tos_count_tWarn_5 = 0;
		

 



/**
 * [tWarn_5 begin ] stop
 */
	
	/**
	 * [tWarn_5 main ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_5", "", Thread.currentThread().getId() + "", "WARN","","DB PLEX connection open","", "");
	globalMap.put("tWarn_5_WARN_MESSAGES", "DB PLEX connection open"); 
	globalMap.put("tWarn_5_WARN_PRIORITY", 4);
	globalMap.put("tWarn_5_WARN_CODE", 42);
	
} catch (Exception e_tWarn_5) {
globalMap.put("tWarn_5_ERROR_MESSAGE",e_tWarn_5.getMessage());
	logIgnoredError(String.format("tWarn_5 - tWarn failed to log message due to internal error: %s", e_tWarn_5), e_tWarn_5);
}


 


	tos_count_tWarn_5++;

/**
 * [tWarn_5 main ] stop
 */
	
	/**
	 * [tWarn_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 process_data_end ] stop
 */
	
	/**
	 * [tWarn_5 end ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 

ok_Hash.put("tWarn_5", true);
end_Hash.put("tWarn_5", System.currentTimeMillis());




/**
 * [tWarn_5 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_5 finally ] start
	 */

	

	
	
	currentComponent="tWarn_5";

	

 



/**
 * [tWarn_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_5_SUBPROCESS_STATE", 1);
	}
	

public void tDie_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";

	
		int tos_count_tDie_3 = 0;
		

 



/**
 * [tDie_3 begin ] stop
 */
	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

	try {
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("DB PLEX Database connection KO");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "DB PLEX Database connection KO");
	globalMap.put("tDie_3_DIE_MESSAGES", "DB PLEX Database connection KO");
	
	} catch (Exception | Error e_tDie_3) {
	    globalMap.put("tDie_3_ERROR_MESSAGE",e_tDie_3.getMessage());
		logIgnoredError(String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3), e_tDie_3);
	}
	
	currentComponent = "tDie_3";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_3_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_begin ] stop
 */
	
	/**
	 * [tDie_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 process_data_end ] stop
 */
	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";

	

 



/**
 * [tDie_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tDBClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_1", false);
		start_Hash.put("tDBClose_1", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_1";

	
		int tos_count_tDBClose_1 = 0;
		

 



/**
 * [tDBClose_1 begin ] stop
 */
	
	/**
	 * [tDBClose_1 main ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	



	java.sql.Connection conn_tDBClose_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
	if(conn_tDBClose_1 != null && !conn_tDBClose_1.isClosed())
	{
        conn_tDBClose_1.close();
	}

 


	tos_count_tDBClose_1++;

/**
 * [tDBClose_1 main ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_1 end ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 

ok_Hash.put("tDBClose_1", true);
end_Hash.put("tDBClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tWarn_3Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBClose_2Process(globalMap);



/**
 * [tDBClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_1 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_1";

	

 



/**
 * [tDBClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_3", false);
		start_Hash.put("tWarn_3", System.currentTimeMillis());
		
	
	currentComponent="tWarn_3";

	
		int tos_count_tWarn_3 = 0;
		

 



/**
 * [tWarn_3 begin ] stop
 */
	
	/**
	 * [tWarn_3 main ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_3", "", Thread.currentThread().getId() + "", "WARN","","DB PLEX connection close","", "");
	globalMap.put("tWarn_3_WARN_MESSAGES", "DB PLEX connection close"); 
	globalMap.put("tWarn_3_WARN_PRIORITY", 4);
	globalMap.put("tWarn_3_WARN_CODE", 42);
	
} catch (Exception e_tWarn_3) {
globalMap.put("tWarn_3_ERROR_MESSAGE",e_tWarn_3.getMessage());
	logIgnoredError(String.format("tWarn_3 - tWarn failed to log message due to internal error: %s", e_tWarn_3), e_tWarn_3);
}


 


	tos_count_tWarn_3++;

/**
 * [tWarn_3 main ] stop
 */
	
	/**
	 * [tWarn_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 process_data_end ] stop
 */
	
	/**
	 * [tWarn_3 end ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 

ok_Hash.put("tWarn_3", true);
end_Hash.put("tWarn_3", System.currentTimeMillis());




/**
 * [tWarn_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_3 finally ] start
	 */

	

	
	
	currentComponent="tWarn_3";

	

 



/**
 * [tWarn_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_3_SUBPROCESS_STATE", 1);
	}
	

public void tDBClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBClose_2", false);
		start_Hash.put("tDBClose_2", System.currentTimeMillis());
		
	
	currentComponent="tDBClose_2";

	
		int tos_count_tDBClose_2 = 0;
		

 



/**
 * [tDBClose_2 begin ] stop
 */
	
	/**
	 * [tDBClose_2 main ] start
	 */

	

	
	
	currentComponent="tDBClose_2";

	



	java.sql.Connection conn_tDBClose_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBClose_2 != null && !conn_tDBClose_2.isClosed())
	{
        conn_tDBClose_2.close();
	}

 


	tos_count_tDBClose_2++;

/**
 * [tDBClose_2 main ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBClose_2";

	

 



/**
 * [tDBClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tDBClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";

	

 



/**
 * [tDBClose_2 process_data_end ] stop
 */
	
	/**
	 * [tDBClose_2 end ] start
	 */

	

	
	
	currentComponent="tDBClose_2";

	

 

ok_Hash.put("tDBClose_2", true);
end_Hash.put("tDBClose_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tWarn_4Process(globalMap);



/**
 * [tDBClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBClose_2 finally ] start
	 */

	

	
	
	currentComponent="tDBClose_2";

	

 



/**
 * [tDBClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBClose_2_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_4", false);
		start_Hash.put("tWarn_4", System.currentTimeMillis());
		
	
	currentComponent="tWarn_4";

	
		int tos_count_tWarn_4 = 0;
		

 



/**
 * [tWarn_4 begin ] stop
 */
	
	/**
	 * [tWarn_4 main ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_4", "", Thread.currentThread().getId() + "", "WARN","","DB DWH connection close","", "");
	globalMap.put("tWarn_4_WARN_MESSAGES", "DB DWH connection close"); 
	globalMap.put("tWarn_4_WARN_PRIORITY", 4);
	globalMap.put("tWarn_4_WARN_CODE", 42);
	
} catch (Exception e_tWarn_4) {
globalMap.put("tWarn_4_ERROR_MESSAGE",e_tWarn_4.getMessage());
	logIgnoredError(String.format("tWarn_4 - tWarn failed to log message due to internal error: %s", e_tWarn_4), e_tWarn_4);
}


 


	tos_count_tWarn_4++;

/**
 * [tWarn_4 main ] stop
 */
	
	/**
	 * [tWarn_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 process_data_end ] stop
 */
	
	/**
	 * [tWarn_4 end ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 

ok_Hash.put("tWarn_4", true);
end_Hash.put("tWarn_4", System.currentTimeMillis());




/**
 * [tWarn_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_4 finally ] start
	 */

	

	
	
	currentComponent="tWarn_4";

	

 



/**
 * [tWarn_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_4_SUBPROCESS_STATE", 1);
	}
	

public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";

	
		int tos_count_tJava_2 = 0;
		


System.out.println("Starting extraction ");

/*

context.FileDateTime = TalendDate.getDate("YYYYMMDDhhmmss");
System.out.println("Starting to load file "+ context.DestinationPath +"/"+ context.FileDateTime + context.FileName);

/*

context.CurrentDate =  TalendDate.getDate("YYYYMMDDHHmmss").toString() ;


context.ErrorDate = "1";
if ( !"".equals(context.NbDayExtract) &&  "".equals(context.StartDate) && "".equals(context.EndDate))
{
context.StartDate = TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.getCurrentDate(),-1*Integer.parseInt(context.NbDayExtract),"dd")).toString();

context.EndDate = TalendDate.formatDate("yyyy-MM-dd",TalendDate.addDate(TalendDate.getCurrentDate(),1,"dd")).toString();
//TalendDate.getDate("YYYY-MM-DD").toString()  ;


context.ErrorDate = "0";
}
if ( "".equals(context.NbDayExtract) &&  !"".equals(context.StartDate) && !"".equals(context.EndDate))
{

context.ErrorDate = "0";
}

System.out.println("StartDate : " + context.StartDate);
System.out.println("EndDate : " + context.EndDate);
*/
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());




/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";

	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
    static byte[] commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ORGANIZATIONLVL3ID;

				public Integer getORGANIZATIONLVL3ID () {
					return this.ORGANIZATIONLVL3ID;
				}
				
			    public Integer SCRAP_ID;

				public Integer getSCRAP_ID () {
					return this.SCRAP_ID;
				}
				
			    public int MATERIAL_ID;

				public int getMATERIAL_ID () {
					return this.MATERIAL_ID;
				}
				
			    public java.util.Date REPORT_DATE;

				public java.util.Date getREPORT_DATE () {
					return this.REPORT_DATE;
				}
				
			    public java.util.Date TRANSACTION_DATE;

				public java.util.Date getTRANSACTION_DATE () {
					return this.TRANSACTION_DATE;
				}
				
			    public String SCRAP_REASON;

				public String getSCRAP_REASON () {
					return this.SCRAP_REASON;
				}
				
			    public double UNIT_PRICE;

				public double getUNIT_PRICE () {
					return this.UNIT_PRICE;
				}
				
			    public double SCRAP_QUANTITY;

				public double getSCRAP_QUANTITY () {
					return this.SCRAP_QUANTITY;
				}
				
			    public double EXT_COST;

				public double getEXT_COST () {
					return this.EXT_COST;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ORGANIZATIONLVL3ID == null) ? 0 : this.ORGANIZATIONLVL3ID.hashCode());
					
						result = prime * result + ((this.SCRAP_ID == null) ? 0 : this.SCRAP_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.ORGANIZATIONLVL3ID == null) {
							if (other.ORGANIZATIONLVL3ID != null)
								return false;
						
						} else if (!this.ORGANIZATIONLVL3ID.equals(other.ORGANIZATIONLVL3ID))
						
							return false;
					
						if (this.SCRAP_ID == null) {
							if (other.SCRAP_ID != null)
								return false;
						
						} else if (!this.SCRAP_ID.equals(other.SCRAP_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.ORGANIZATIONLVL3ID = this.ORGANIZATIONLVL3ID;
	            other.SCRAP_ID = this.SCRAP_ID;
	            other.MATERIAL_ID = this.MATERIAL_ID;
	            other.REPORT_DATE = this.REPORT_DATE;
	            other.TRANSACTION_DATE = this.TRANSACTION_DATE;
	            other.SCRAP_REASON = this.SCRAP_REASON;
	            other.UNIT_PRICE = this.UNIT_PRICE;
	            other.SCRAP_QUANTITY = this.SCRAP_QUANTITY;
	            other.EXT_COST = this.EXT_COST;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.ORGANIZATIONLVL3ID = this.ORGANIZATIONLVL3ID;
	            	other.SCRAP_ID = this.SCRAP_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
			        this.MATERIAL_ID = dis.readInt();
					
					this.REPORT_DATE = readDate(dis);
					
					this.TRANSACTION_DATE = readDate(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			        this.UNIT_PRICE = dis.readDouble();
					
			        this.SCRAP_QUANTITY = dis.readDouble();
					
			        this.EXT_COST = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
			        this.MATERIAL_ID = dis.readInt();
					
					this.REPORT_DATE = readDate(dis);
					
					this.TRANSACTION_DATE = readDate(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			        this.UNIT_PRICE = dis.readDouble();
					
			        this.SCRAP_QUANTITY = dis.readDouble();
					
			        this.EXT_COST = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// int
				
		            	dos.writeInt(this.MATERIAL_ID);
					
					// java.util.Date
				
						writeDate(this.REPORT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// double
				
		            	dos.writeDouble(this.UNIT_PRICE);
					
					// double
				
		            	dos.writeDouble(this.SCRAP_QUANTITY);
					
					// double
				
		            	dos.writeDouble(this.EXT_COST);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// int
				
		            	dos.writeInt(this.MATERIAL_ID);
					
					// java.util.Date
				
						writeDate(this.REPORT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// double
				
		            	dos.writeDouble(this.UNIT_PRICE);
					
					// double
				
		            	dos.writeDouble(this.SCRAP_QUANTITY);
					
					// double
				
		            	dos.writeDouble(this.EXT_COST);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORGANIZATIONLVL3ID="+String.valueOf(ORGANIZATIONLVL3ID));
		sb.append(",SCRAP_ID="+String.valueOf(SCRAP_ID));
		sb.append(",MATERIAL_ID="+String.valueOf(MATERIAL_ID));
		sb.append(",REPORT_DATE="+String.valueOf(REPORT_DATE));
		sb.append(",TRANSACTION_DATE="+String.valueOf(TRANSACTION_DATE));
		sb.append(",SCRAP_REASON="+SCRAP_REASON);
		sb.append(",UNIT_PRICE="+String.valueOf(UNIT_PRICE));
		sb.append(",SCRAP_QUANTITY="+String.valueOf(SCRAP_QUANTITY));
		sb.append(",EXT_COST="+String.valueOf(EXT_COST));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ORGANIZATIONLVL3ID, other.ORGANIZATIONLVL3ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SCRAP_ID, other.SCRAP_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class InsertStruct implements routines.system.IPersistableRow<InsertStruct> {
    final static byte[] commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
    static byte[] commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Integer ORGANIZATIONLVL3ID;

				public Integer getORGANIZATIONLVL3ID () {
					return this.ORGANIZATIONLVL3ID;
				}
				
			    public Integer SCRAP_ID;

				public Integer getSCRAP_ID () {
					return this.SCRAP_ID;
				}
				
			    public int MATERIAL_ID;

				public int getMATERIAL_ID () {
					return this.MATERIAL_ID;
				}
				
			    public java.util.Date REPORT_DATE;

				public java.util.Date getREPORT_DATE () {
					return this.REPORT_DATE;
				}
				
			    public java.util.Date TRANSACTION_DATE;

				public java.util.Date getTRANSACTION_DATE () {
					return this.TRANSACTION_DATE;
				}
				
			    public String SCRAP_REASON;

				public String getSCRAP_REASON () {
					return this.SCRAP_REASON;
				}
				
			    public double UNIT_PRICE;

				public double getUNIT_PRICE () {
					return this.UNIT_PRICE;
				}
				
			    public double SCRAP_QUANTITY;

				public double getSCRAP_QUANTITY () {
					return this.SCRAP_QUANTITY;
				}
				
			    public double EXT_COST;

				public double getEXT_COST () {
					return this.EXT_COST;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ORGANIZATIONLVL3ID == null) ? 0 : this.ORGANIZATIONLVL3ID.hashCode());
					
						result = prime * result + ((this.SCRAP_ID == null) ? 0 : this.SCRAP_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final InsertStruct other = (InsertStruct) obj;
		
						if (this.ORGANIZATIONLVL3ID == null) {
							if (other.ORGANIZATIONLVL3ID != null)
								return false;
						
						} else if (!this.ORGANIZATIONLVL3ID.equals(other.ORGANIZATIONLVL3ID))
						
							return false;
					
						if (this.SCRAP_ID == null) {
							if (other.SCRAP_ID != null)
								return false;
						
						} else if (!this.SCRAP_ID.equals(other.SCRAP_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(InsertStruct other) {

		other.ORGANIZATIONLVL3ID = this.ORGANIZATIONLVL3ID;
	            other.SCRAP_ID = this.SCRAP_ID;
	            other.MATERIAL_ID = this.MATERIAL_ID;
	            other.REPORT_DATE = this.REPORT_DATE;
	            other.TRANSACTION_DATE = this.TRANSACTION_DATE;
	            other.SCRAP_REASON = this.SCRAP_REASON;
	            other.UNIT_PRICE = this.UNIT_PRICE;
	            other.SCRAP_QUANTITY = this.SCRAP_QUANTITY;
	            other.EXT_COST = this.EXT_COST;
	            
	}

	public void copyKeysDataTo(InsertStruct other) {

		other.ORGANIZATIONLVL3ID = this.ORGANIZATIONLVL3ID;
	            	other.SCRAP_ID = this.SCRAP_ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
			        this.MATERIAL_ID = dis.readInt();
					
					this.REPORT_DATE = readDate(dis);
					
					this.TRANSACTION_DATE = readDate(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			        this.UNIT_PRICE = dis.readDouble();
					
			        this.SCRAP_QUANTITY = dis.readDouble();
					
			        this.EXT_COST = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
			        this.MATERIAL_ID = dis.readInt();
					
					this.REPORT_DATE = readDate(dis);
					
					this.TRANSACTION_DATE = readDate(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			        this.UNIT_PRICE = dis.readDouble();
					
			        this.SCRAP_QUANTITY = dis.readDouble();
					
			        this.EXT_COST = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// int
				
		            	dos.writeInt(this.MATERIAL_ID);
					
					// java.util.Date
				
						writeDate(this.REPORT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// double
				
		            	dos.writeDouble(this.UNIT_PRICE);
					
					// double
				
		            	dos.writeDouble(this.SCRAP_QUANTITY);
					
					// double
				
		            	dos.writeDouble(this.EXT_COST);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// int
				
		            	dos.writeInt(this.MATERIAL_ID);
					
					// java.util.Date
				
						writeDate(this.REPORT_DATE,dos);
					
					// java.util.Date
				
						writeDate(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// double
				
		            	dos.writeDouble(this.UNIT_PRICE);
					
					// double
				
		            	dos.writeDouble(this.SCRAP_QUANTITY);
					
					// double
				
		            	dos.writeDouble(this.EXT_COST);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORGANIZATIONLVL3ID="+String.valueOf(ORGANIZATIONLVL3ID));
		sb.append(",SCRAP_ID="+String.valueOf(SCRAP_ID));
		sb.append(",MATERIAL_ID="+String.valueOf(MATERIAL_ID));
		sb.append(",REPORT_DATE="+String.valueOf(REPORT_DATE));
		sb.append(",TRANSACTION_DATE="+String.valueOf(TRANSACTION_DATE));
		sb.append(",SCRAP_REASON="+SCRAP_REASON);
		sb.append(",UNIT_PRICE="+String.valueOf(UNIT_PRICE));
		sb.append(",SCRAP_QUANTITY="+String.valueOf(SCRAP_QUANTITY));
		sb.append(",EXT_COST="+String.valueOf(EXT_COST));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsertStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ORGANIZATIONLVL3ID, other.ORGANIZATIONLVL3ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SCRAP_ID, other.SCRAP_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
    static byte[] commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];

	
			    public Integer ORGANIZATIONLVL3ID;

				public Integer getORGANIZATIONLVL3ID () {
					return this.ORGANIZATIONLVL3ID;
				}
				
			    public Integer SCRAP_ID;

				public Integer getSCRAP_ID () {
					return this.SCRAP_ID;
				}
				
			    public String PART_NO_UNIQUE;

				public String getPART_NO_UNIQUE () {
					return this.PART_NO_UNIQUE;
				}
				
			    public String REPORT_DATE;

				public String getREPORT_DATE () {
					return this.REPORT_DATE;
				}
				
			    public String TRANSACTION_DATE;

				public String getTRANSACTION_DATE () {
					return this.TRANSACTION_DATE;
				}
				
			    public String SCRAP_REASON;

				public String getSCRAP_REASON () {
					return this.SCRAP_REASON;
				}
				
			    public Double UNIT_PRICE;

				public Double getUNIT_PRICE () {
					return this.UNIT_PRICE;
				}
				
			    public Double SCRAP_QUANTITY;

				public Double getSCRAP_QUANTITY () {
					return this.SCRAP_QUANTITY;
				}
				
			    public Double EXTENDED_COST;

				public Double getEXTENDED_COST () {
					return this.EXTENDED_COST;
				}
				
			    public String NOTE;

				public String getNOTE () {
					return this.NOTE;
				}
				
			    public String WORKCENTER_CODE_UNIQUE;

				public String getWORKCENTER_CODE_UNIQUE () {
					return this.WORKCENTER_CODE_UNIQUE;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
					this.PART_NO_UNIQUE = readString(dis);
					
					this.REPORT_DATE = readString(dis);
					
					this.TRANSACTION_DATE = readString(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIT_PRICE = null;
           				} else {
           			    	this.UNIT_PRICE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SCRAP_QUANTITY = null;
           				} else {
           			    	this.SCRAP_QUANTITY = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXTENDED_COST = null;
           				} else {
           			    	this.EXTENDED_COST = dis.readDouble();
           				}
					
					this.NOTE = readString(dis);
					
					this.WORKCENTER_CODE_UNIQUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
					this.PART_NO_UNIQUE = readString(dis);
					
					this.REPORT_DATE = readString(dis);
					
					this.TRANSACTION_DATE = readString(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIT_PRICE = null;
           				} else {
           			    	this.UNIT_PRICE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SCRAP_QUANTITY = null;
           				} else {
           			    	this.SCRAP_QUANTITY = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXTENDED_COST = null;
           				} else {
           			    	this.EXTENDED_COST = dis.readDouble();
           				}
					
					this.NOTE = readString(dis);
					
					this.WORKCENTER_CODE_UNIQUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// String
				
						writeString(this.PART_NO_UNIQUE,dos);
					
					// String
				
						writeString(this.REPORT_DATE,dos);
					
					// String
				
						writeString(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// Double
				
						if(this.UNIT_PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIT_PRICE);
		            	}
					
					// Double
				
						if(this.SCRAP_QUANTITY == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SCRAP_QUANTITY);
		            	}
					
					// Double
				
						if(this.EXTENDED_COST == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EXTENDED_COST);
		            	}
					
					// String
				
						writeString(this.NOTE,dos);
					
					// String
				
						writeString(this.WORKCENTER_CODE_UNIQUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// String
				
						writeString(this.PART_NO_UNIQUE,dos);
					
					// String
				
						writeString(this.REPORT_DATE,dos);
					
					// String
				
						writeString(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// Double
				
						if(this.UNIT_PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIT_PRICE);
		            	}
					
					// Double
				
						if(this.SCRAP_QUANTITY == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SCRAP_QUANTITY);
		            	}
					
					// Double
				
						if(this.EXTENDED_COST == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EXTENDED_COST);
		            	}
					
					// String
				
						writeString(this.NOTE,dos);
					
					// String
				
						writeString(this.WORKCENTER_CODE_UNIQUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORGANIZATIONLVL3ID="+String.valueOf(ORGANIZATIONLVL3ID));
		sb.append(",SCRAP_ID="+String.valueOf(SCRAP_ID));
		sb.append(",PART_NO_UNIQUE="+PART_NO_UNIQUE);
		sb.append(",REPORT_DATE="+REPORT_DATE);
		sb.append(",TRANSACTION_DATE="+TRANSACTION_DATE);
		sb.append(",SCRAP_REASON="+SCRAP_REASON);
		sb.append(",UNIT_PRICE="+String.valueOf(UNIT_PRICE));
		sb.append(",SCRAP_QUANTITY="+String.valueOf(SCRAP_QUANTITY));
		sb.append(",EXTENDED_COST="+String.valueOf(EXTENDED_COST));
		sb.append(",NOTE="+NOTE);
		sb.append(",WORKCENTER_CODE_UNIQUE="+WORKCENTER_CODE_UNIQUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
    static byte[] commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];

	
			    public Integer ORGANIZATIONLVL3ID;

				public Integer getORGANIZATIONLVL3ID () {
					return this.ORGANIZATIONLVL3ID;
				}
				
			    public Integer SCRAP_ID;

				public Integer getSCRAP_ID () {
					return this.SCRAP_ID;
				}
				
			    public String PART_NO_UNIQUE;

				public String getPART_NO_UNIQUE () {
					return this.PART_NO_UNIQUE;
				}
				
			    public String REPORT_DATE;

				public String getREPORT_DATE () {
					return this.REPORT_DATE;
				}
				
			    public String TRANSACTION_DATE;

				public String getTRANSACTION_DATE () {
					return this.TRANSACTION_DATE;
				}
				
			    public String SCRAP_REASON;

				public String getSCRAP_REASON () {
					return this.SCRAP_REASON;
				}
				
			    public Double UNIT_PRICE;

				public Double getUNIT_PRICE () {
					return this.UNIT_PRICE;
				}
				
			    public Double SCRAP_QUANTITY;

				public Double getSCRAP_QUANTITY () {
					return this.SCRAP_QUANTITY;
				}
				
			    public Double EXTENDED_COST;

				public Double getEXTENDED_COST () {
					return this.EXTENDED_COST;
				}
				
			    public String NOTE;

				public String getNOTE () {
					return this.NOTE;
				}
				
			    public String WORKCENTER_CODE_UNIQUE;

				public String getWORKCENTER_CODE_UNIQUE () {
					return this.WORKCENTER_CODE_UNIQUE;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
					this.PART_NO_UNIQUE = readString(dis);
					
					this.REPORT_DATE = readString(dis);
					
					this.TRANSACTION_DATE = readString(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIT_PRICE = null;
           				} else {
           			    	this.UNIT_PRICE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SCRAP_QUANTITY = null;
           				} else {
           			    	this.SCRAP_QUANTITY = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXTENDED_COST = null;
           				} else {
           			    	this.EXTENDED_COST = dis.readDouble();
           				}
					
					this.NOTE = readString(dis);
					
					this.WORKCENTER_CODE_UNIQUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
						this.ORGANIZATIONLVL3ID = readInteger(dis);
					
						this.SCRAP_ID = readInteger(dis);
					
					this.PART_NO_UNIQUE = readString(dis);
					
					this.REPORT_DATE = readString(dis);
					
					this.TRANSACTION_DATE = readString(dis);
					
					this.SCRAP_REASON = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.UNIT_PRICE = null;
           				} else {
           			    	this.UNIT_PRICE = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SCRAP_QUANTITY = null;
           				} else {
           			    	this.SCRAP_QUANTITY = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.EXTENDED_COST = null;
           				} else {
           			    	this.EXTENDED_COST = dis.readDouble();
           				}
					
					this.NOTE = readString(dis);
					
					this.WORKCENTER_CODE_UNIQUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// String
				
						writeString(this.PART_NO_UNIQUE,dos);
					
					// String
				
						writeString(this.REPORT_DATE,dos);
					
					// String
				
						writeString(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// Double
				
						if(this.UNIT_PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIT_PRICE);
		            	}
					
					// Double
				
						if(this.SCRAP_QUANTITY == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SCRAP_QUANTITY);
		            	}
					
					// Double
				
						if(this.EXTENDED_COST == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EXTENDED_COST);
		            	}
					
					// String
				
						writeString(this.NOTE,dos);
					
					// String
				
						writeString(this.WORKCENTER_CODE_UNIQUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ORGANIZATIONLVL3ID,dos);
					
					// Integer
				
						writeInteger(this.SCRAP_ID,dos);
					
					// String
				
						writeString(this.PART_NO_UNIQUE,dos);
					
					// String
				
						writeString(this.REPORT_DATE,dos);
					
					// String
				
						writeString(this.TRANSACTION_DATE,dos);
					
					// String
				
						writeString(this.SCRAP_REASON,dos);
					
					// Double
				
						if(this.UNIT_PRICE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.UNIT_PRICE);
		            	}
					
					// Double
				
						if(this.SCRAP_QUANTITY == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SCRAP_QUANTITY);
		            	}
					
					// Double
				
						if(this.EXTENDED_COST == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.EXTENDED_COST);
		            	}
					
					// String
				
						writeString(this.NOTE,dos);
					
					// String
				
						writeString(this.WORKCENTER_CODE_UNIQUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ORGANIZATIONLVL3ID="+String.valueOf(ORGANIZATIONLVL3ID));
		sb.append(",SCRAP_ID="+String.valueOf(SCRAP_ID));
		sb.append(",PART_NO_UNIQUE="+PART_NO_UNIQUE);
		sb.append(",REPORT_DATE="+REPORT_DATE);
		sb.append(",TRANSACTION_DATE="+TRANSACTION_DATE);
		sb.append(",SCRAP_REASON="+SCRAP_REASON);
		sb.append(",UNIT_PRICE="+String.valueOf(UNIT_PRICE));
		sb.append(",SCRAP_QUANTITY="+String.valueOf(SCRAP_QUANTITY));
		sb.append(",EXTENDED_COST="+String.valueOf(EXTENDED_COST));
		sb.append(",NOTE="+NOTE);
		sb.append(",WORKCENTER_CODE_UNIQUE="+WORKCENTER_CODE_UNIQUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
InsertStruct Insert = new InsertStruct();
row2Struct row2 = new row2Struct();






	
	/**
	 * [tDBCommit_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBCommit_1", false);
		start_Hash.put("tDBCommit_1", System.currentTimeMillis());
		
	
	currentComponent="tDBCommit_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tDBCommit_1 = 0;
		

 



/**
 * [tDBCommit_1 begin ] stop
 */



	
	/**
	 * [tDBOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBOutput_1", false);
		start_Hash.put("tDBOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBOutput_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Insert");
					}
				
		int tos_count_tDBOutput_1 = 0;
		



int nb_line_tDBOutput_1 = 0;
int nb_line_update_tDBOutput_1 = 0;
int nb_line_inserted_tDBOutput_1 = 0;
int nb_line_deleted_tDBOutput_1 = 0;
int nb_line_rejected_tDBOutput_1 = 0;

int deletedCount_tDBOutput_1=0;
int updatedCount_tDBOutput_1=0;
int insertedCount_tDBOutput_1=0;
int rowsToCommitCount_tDBOutput_1=0;
int rejectedCount_tDBOutput_1=0;
String dbschema_tDBOutput_1 = null;
String tableName_tDBOutput_1 = null;
boolean whetherReject_tDBOutput_1 = false;

java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","0001-01-01").getTime();
long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd","1753-01-01").getTime();
long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss","9999-12-31 24:00:00").getTime();
long date_tDBOutput_1;

java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar.getInstance(java.util.TimeZone.getTimeZone("UTC"));


        int updateKeyCount_tDBOutput_1 = 2;
        if(updateKeyCount_tDBOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tDBOutput_1 == 9 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }

	
java.sql.Connection conn_tDBOutput_1 = null;
String dbUser_tDBOutput_1 = null;
	dbschema_tDBOutput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
	
	conn_tDBOutput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	

if(dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
    tableName_tDBOutput_1 = "ODS_MATERIAL_SCRAP";
} else {
    tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "ODS_MATERIAL_SCRAP";
}
	int count_tDBOutput_1=0;

        java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement("SELECT COUNT(1) FROM [" + tableName_tDBOutput_1 + "] WHERE [ORGANIZATIONLVL3ID] = ? AND [SCRAP_ID] = ?");
        resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);
        String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1 + "] ([ORGANIZATIONLVL3ID],[SCRAP_ID],[MATERIAL_ID],[REPORT_DATE],[TRANSACTION_DATE],[SCRAP_REASON],[UNIT_PRICE],[SCRAP_QUANTITY],[EXT_COST]) VALUES (?,?,?,?,?,?,?,?,?)";
        java.sql.PreparedStatement pstmtInsert_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
        resourceMap.put("pstmtInsert_tDBOutput_1", pstmtInsert_tDBOutput_1);
        String update_tDBOutput_1 = "UPDATE [" + tableName_tDBOutput_1 + "] SET [MATERIAL_ID] = ?,[REPORT_DATE] = ?,[TRANSACTION_DATE] = ?,[SCRAP_REASON] = ?,[UNIT_PRICE] = ?,[SCRAP_QUANTITY] = ?,[EXT_COST] = ? WHERE [ORGANIZATIONLVL3ID] = ? AND [SCRAP_ID] = ?";
        java.sql.PreparedStatement pstmtUpdate_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(update_tDBOutput_1);
        resourceMap.put("pstmtUpdate_tDBOutput_1", pstmtUpdate_tDBOutput_1);
 	boolean isShareIdentity_tDBOutput_1 = globalMap.get("shareIdentitySetting_tDBConnection_1") != null && (Boolean)globalMap.get("shareIdentitySetting_tDBConnection_1") == true;

 



/**
 * [tDBOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct>) 
					globalMap.get( "tHash_Lookup_row3" ))
					;					
					
	

row3Struct row3HashKey = new row3Struct();
row3Struct row3Default = new row3Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsertStruct Insert_tmp = new InsertStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_2");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_2");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nEXEC ('sproc278344_10639364_1833676') AT [PLEX]\n";
		    

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.ORGANIZATIONLVL3ID = null;
							} else {
		                          
            row1.ORGANIZATIONLVL3ID = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    row1.ORGANIZATIONLVL3ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.SCRAP_ID = null;
							} else {
		                          
            row1.SCRAP_ID = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    row1.SCRAP_ID = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.PART_NO_UNIQUE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.PART_NO_UNIQUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.PART_NO_UNIQUE = tmpContent_tDBInput_1;
                }
            } else {
                row1.PART_NO_UNIQUE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.REPORT_DATE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.REPORT_DATE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.REPORT_DATE = tmpContent_tDBInput_1;
                }
            } else {
                row1.REPORT_DATE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.TRANSACTION_DATE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.TRANSACTION_DATE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.TRANSACTION_DATE = tmpContent_tDBInput_1;
                }
            } else {
                row1.TRANSACTION_DATE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.SCRAP_REASON = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SCRAP_REASON = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SCRAP_REASON = tmpContent_tDBInput_1;
                }
            } else {
                row1.SCRAP_REASON = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.UNIT_PRICE = null;
							} else {
	                         		
            row1.UNIT_PRICE = rs_tDBInput_1.getDouble(7);
            if(rs_tDBInput_1.wasNull()){
                    row1.UNIT_PRICE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.SCRAP_QUANTITY = null;
							} else {
	                         		
            row1.SCRAP_QUANTITY = rs_tDBInput_1.getDouble(8);
            if(rs_tDBInput_1.wasNull()){
                    row1.SCRAP_QUANTITY = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.EXTENDED_COST = null;
							} else {
	                         		
            row1.EXTENDED_COST = rs_tDBInput_1.getDouble(9);
            if(rs_tDBInput_1.wasNull()){
                    row1.EXTENDED_COST = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.NOTE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.NOTE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.NOTE = tmpContent_tDBInput_1;
                }
            } else {
                row1.NOTE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.WORKCENTER_CODE_UNIQUE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.WORKCENTER_CODE_UNIQUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.WORKCENTER_CODE_UNIQUE = tmpContent_tDBInput_1;
                }
            } else {
                row1.WORKCENTER_CODE_UNIQUE = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		

        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row3" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow3 = false;
       		  	    	
       		  	    	
 							row3Struct row3ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row3HashKey.MATERIAL_NO_UNIQUE = row1.PART_NO_UNIQUE ;
                        		    		

								
		                        	row3HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row3.lookup( row3HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row3 != null && tHash_Lookup_row3.getCount(row3HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row3' and it contains more one result from keys :  row3.MATERIAL_NO_UNIQUE = '" + row3HashKey.MATERIAL_NO_UNIQUE + "'");
								} // G 071
							

							row3Struct row3 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row3Struct fromLookup_row3 = null;
							row3 = row3Default;
										 
							
								 
							
							
								if (tHash_Lookup_row3 !=null && tHash_Lookup_row3.hasNext()) { // G 099
								
							
								
								fromLookup_row3 = tHash_Lookup_row3.next();

							
							
								} // G 099
							
							

							if(fromLookup_row3 != null) {
								row3 = fromLookup_row3;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

Insert = null;


// # Output table : 'Insert'
Insert_tmp.ORGANIZATIONLVL3ID = row1.ORGANIZATIONLVL3ID ;
Insert_tmp.SCRAP_ID = row1.SCRAP_ID ;
Insert_tmp.MATERIAL_ID = row3.MATERIAL_ID ;
Insert_tmp.REPORT_DATE = TalendDate.parseDate("yyyy-MM-dd",row1.REPORT_DATE ) ;
Insert_tmp.TRANSACTION_DATE = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss",row1.TRANSACTION_DATE) ;
Insert_tmp.SCRAP_REASON = row1.SCRAP_REASON ;
Insert_tmp.UNIT_PRICE = row1.UNIT_PRICE ;
Insert_tmp.SCRAP_QUANTITY = row1.SCRAP_QUANTITY ;
Insert_tmp.EXT_COST = row1.EXTENDED_COST ;
Insert = Insert_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "Insert"
if(Insert != null) { 



	
	/**
	 * [tDBOutput_1 main ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Insert"
						
						);
					}
					



            row2 = null;
        whetherReject_tDBOutput_1 = false;


                    if(Insert.ORGANIZATIONLVL3ID == null) {
pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(1, Insert.ORGANIZATIONLVL3ID);
}



                    if(Insert.SCRAP_ID == null) {
pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmt_tDBOutput_1.setInt(2, Insert.SCRAP_ID);
}

            int checkCount_tDBOutput_1 = -1;
            try (java.sql.ResultSet rs_tDBOutput_1 = pstmt_tDBOutput_1.executeQuery()) {
                while(rs_tDBOutput_1.next()) {
                    checkCount_tDBOutput_1 = rs_tDBOutput_1.getInt(1);
                }
            }
            if(checkCount_tDBOutput_1 > 0) {
                        pstmtUpdate_tDBOutput_1.setInt(1, Insert.MATERIAL_ID);

                        if(Insert.REPORT_DATE != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(2, new java.sql.Timestamp(Insert.REPORT_DATE.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(2, java.sql.Types.TIMESTAMP);
}

                        if(Insert.TRANSACTION_DATE != null) {
pstmtUpdate_tDBOutput_1.setTimestamp(3, new java.sql.Timestamp(Insert.TRANSACTION_DATE.getTime()));
} else {
pstmtUpdate_tDBOutput_1.setNull(3, java.sql.Types.TIMESTAMP);
}

                        if(Insert.SCRAP_REASON == null) {
pstmtUpdate_tDBOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tDBOutput_1.setString(4, Insert.SCRAP_REASON);
}

                        pstmtUpdate_tDBOutput_1.setDouble(5, Insert.UNIT_PRICE);

                        pstmtUpdate_tDBOutput_1.setDouble(6, Insert.SCRAP_QUANTITY);

                        pstmtUpdate_tDBOutput_1.setDouble(7, Insert.EXT_COST);


	                    

                        if(Insert.ORGANIZATIONLVL3ID == null) {
pstmtUpdate_tDBOutput_1.setNull(8 + count_tDBOutput_1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(8 + count_tDBOutput_1, Insert.ORGANIZATIONLVL3ID);
}


	                    

                        if(Insert.SCRAP_ID == null) {
pstmtUpdate_tDBOutput_1.setNull(9 + count_tDBOutput_1, java.sql.Types.INTEGER);
} else {pstmtUpdate_tDBOutput_1.setInt(9 + count_tDBOutput_1, Insert.SCRAP_ID);
}

            try {
                    int processedCount_tDBOutput_1 = pstmtUpdate_tDBOutput_1.executeUpdate();
                    updatedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
        			
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            } else {
                        if(Insert.ORGANIZATIONLVL3ID == null) {
pstmtInsert_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(1, Insert.ORGANIZATIONLVL3ID);
}

                        if(Insert.SCRAP_ID == null) {
pstmtInsert_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
} else {pstmtInsert_tDBOutput_1.setInt(2, Insert.SCRAP_ID);
}

                        pstmtInsert_tDBOutput_1.setInt(3, Insert.MATERIAL_ID);

                        if(Insert.REPORT_DATE != null) {
pstmtInsert_tDBOutput_1.setTimestamp(4, new java.sql.Timestamp(Insert.REPORT_DATE.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(4, java.sql.Types.TIMESTAMP);
}

                        if(Insert.TRANSACTION_DATE != null) {
pstmtInsert_tDBOutput_1.setTimestamp(5, new java.sql.Timestamp(Insert.TRANSACTION_DATE.getTime()));
} else {
pstmtInsert_tDBOutput_1.setNull(5, java.sql.Types.TIMESTAMP);
}

                        if(Insert.SCRAP_REASON == null) {
pstmtInsert_tDBOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tDBOutput_1.setString(6, Insert.SCRAP_REASON);
}

                        pstmtInsert_tDBOutput_1.setDouble(7, Insert.UNIT_PRICE);

                        pstmtInsert_tDBOutput_1.setDouble(8, Insert.SCRAP_QUANTITY);

                        pstmtInsert_tDBOutput_1.setDouble(9, Insert.EXT_COST);

            try {
                    int processedCount_tDBOutput_1 = pstmtInsert_tDBOutput_1.executeUpdate();
                    insertedCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    rowsToCommitCount_tDBOutput_1 += processedCount_tDBOutput_1;
                    nb_line_tDBOutput_1++;
                } catch(java.lang.Exception e) {
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                    whetherReject_tDBOutput_1 = true;
                    	nb_line_tDBOutput_1++;
                    	
                            System.err.println(e.getMessage());
                }
            }
            if(!whetherReject_tDBOutput_1) {
                            row2 = new row2Struct();
                                row2.ORGANIZATIONLVL3ID = Insert.ORGANIZATIONLVL3ID;
                                row2.SCRAP_ID = Insert.SCRAP_ID;
                                row2.MATERIAL_ID = Insert.MATERIAL_ID;
                                row2.REPORT_DATE = Insert.REPORT_DATE;
                                row2.TRANSACTION_DATE = Insert.TRANSACTION_DATE;
                                row2.SCRAP_REASON = Insert.SCRAP_REASON;
                                row2.UNIT_PRICE = Insert.UNIT_PRICE;
                                row2.SCRAP_QUANTITY = Insert.SCRAP_QUANTITY;
                                row2.EXT_COST = Insert.EXT_COST;
            }
            	//////////batch execute by batch size///////
            	class LimitBytesHelper_tDBOutput_1{
            		public int limitBytePart1(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
						
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	int countSum_tDBOutput_1 = 0;
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
				
            	    	
                		System.err.println(e.getMessage());
                	
               			 }
    				return counter;
            	}
            	
            	public int limitBytePart2(int counter,java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
                try {
                		
						for(int countEach_tDBOutput_1: pstmt_tDBOutput_1.executeBatch()) {
							if(countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							counter += countEach_tDBOutput_1;
						}
						
                }catch (java.sql.BatchUpdateException e){
globalMap.put("tDBOutput_1_ERROR_MESSAGE",e.getMessage());
                	
                	
					for(int countEach_tDBOutput_1: e.getUpdateCounts()) {
						counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}
					
            	    	
                        System.err.println(e.getMessage());
                	
                		}	
                	return counter;	
            	}
            }

    	////////////commit every////////////
    			

 


	tos_count_tDBOutput_1++;

/**
 * [tDBOutput_1 main ] stop
 */
	
	/**
	 * [tDBOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tDBCommit_1 main ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					

	java.sql.Connection conn_tDBCommit_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
	if(conn_tDBCommit_1 != null && !conn_tDBCommit_1.isClosed())
	{
	
			
			conn_tDBCommit_1.commit();
			
	
	}

 


	tos_count_tDBCommit_1++;

/**
 * [tDBCommit_1 main ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBCommit_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tDBOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	

 



/**
 * [tDBOutput_1 process_data_end ] stop
 */

} // End of branch "Insert"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row3 != null) {
						tHash_Lookup_row3.endGet();
					}
					globalMap.remove( "tHash_Lookup_row3" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tDBOutput_1 end ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



        if(pstmtUpdate_tDBOutput_1 != null){
            pstmtUpdate_tDBOutput_1.close();
            resourceMap.remove("pstmtUpdate_tDBOutput_1");
        }
        if(pstmtInsert_tDBOutput_1 != null){
            pstmtInsert_tDBOutput_1.close();
            resourceMap.remove("pstmtInsert_tDBOutput_1");
        }
        if(pstmt_tDBOutput_1 != null) {
            pstmt_tDBOutput_1.close();
            resourceMap.remove("pstmt_tDBOutput_1");
        }
    resourceMap.put("statementClosed_tDBOutput_1", true);

	nb_line_deleted_tDBOutput_1=nb_line_deleted_tDBOutput_1+ deletedCount_tDBOutput_1;
	nb_line_update_tDBOutput_1=nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
	nb_line_inserted_tDBOutput_1=nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
	nb_line_rejected_tDBOutput_1=nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;
	
        globalMap.put("tDBOutput_1_NB_LINE",nb_line_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_UPDATED",nb_line_update_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_INSERTED",nb_line_inserted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_DELETED",nb_line_deleted_tDBOutput_1);
        globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);
    

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Insert");
			  	}
			  	
 

ok_Hash.put("tDBOutput_1", true);
end_Hash.put("tDBOutput_1", System.currentTimeMillis());




/**
 * [tDBOutput_1 end ] stop
 */

	
	/**
	 * [tDBCommit_1 end ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tDBCommit_1", true);
end_Hash.put("tDBCommit_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tWarn_2Process(globalMap);



/**
 * [tDBCommit_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row3"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tDBOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBOutput_1";

	



    if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tDBOutput_1 = null;
                if ((pstmtUpdateToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tDBOutput_1")) != null) {
                    pstmtUpdateToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tDBOutput_1 = null;
                if ((pstmtInsertToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tDBOutput_1")) != null) {
                    pstmtInsertToClose_tDBOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
                if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tDBOutput_1")) != null) {
                    pstmtToClose_tDBOutput_1.close();
                }
    }
 



/**
 * [tDBOutput_1 finally ] stop
 */

	
	/**
	 * [tDBCommit_1 finally ] start
	 */

	

	
	
	currentComponent="tDBCommit_1";

	

 



/**
 * [tDBCommit_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tWarn_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tWarn_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tWarn_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tWarn_2", false);
		start_Hash.put("tWarn_2", System.currentTimeMillis());
		
	
	currentComponent="tWarn_2";

	
		int tos_count_tWarn_2 = 0;
		

 



/**
 * [tWarn_2 begin ] stop
 */
	
	/**
	 * [tWarn_2 main ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

		
try {
	
	resumeUtil.addLog("USER_DEF_LOG", "NODE:tWarn_2", "", Thread.currentThread().getId() + "", "WARN","","SAVED DB","", "");
	globalMap.put("tWarn_2_WARN_MESSAGES", "SAVED DB"); 
	globalMap.put("tWarn_2_WARN_PRIORITY", 4);
	globalMap.put("tWarn_2_WARN_CODE", 42);
	
} catch (Exception e_tWarn_2) {
globalMap.put("tWarn_2_ERROR_MESSAGE",e_tWarn_2.getMessage());
	logIgnoredError(String.format("tWarn_2 - tWarn failed to log message due to internal error: %s", e_tWarn_2), e_tWarn_2);
}


 


	tos_count_tWarn_2++;

/**
 * [tWarn_2 main ] stop
 */
	
	/**
	 * [tWarn_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_begin ] stop
 */
	
	/**
	 * [tWarn_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 process_data_end ] stop
 */
	
	/**
	 * [tWarn_2 end ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 

ok_Hash.put("tWarn_2", true);
end_Hash.put("tWarn_2", System.currentTimeMillis());




/**
 * [tWarn_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tWarn_2 finally ] start
	 */

	

	
	
	currentComponent="tWarn_2";

	

 



/**
 * [tWarn_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tWarn_2_SUBPROCESS_STATE", 1);
	}
	

public void tDie_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_4", false);
		start_Hash.put("tDie_4", System.currentTimeMillis());
		
	
	currentComponent="tDie_4";

	
		int tos_count_tDie_4 = 0;
		

 



/**
 * [tDie_4 begin ] stop
 */
	
	/**
	 * [tDie_4 main ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

	try {
	globalMap.put("tDie_4_DIE_PRIORITY", 5);
	System.err.println("error with the DWH database");
	
	globalMap.put("tDie_4_DIE_MESSAGE", "error with the DWH database");
	globalMap.put("tDie_4_DIE_MESSAGES", "error with the DWH database");
	
	} catch (Exception | Error e_tDie_4) {
	    globalMap.put("tDie_4_ERROR_MESSAGE",e_tDie_4.getMessage());
		logIgnoredError(String.format("tDie_4 - tDie failed to log message due to internal error: %s", e_tDie_4), e_tDie_4);
	}
	
	currentComponent = "tDie_4";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_4_DIE_CODE", errorCode);        
    
	if(true){	
	    throw new TDieException();
	}

 


	tos_count_tDie_4++;

/**
 * [tDie_4 main ] stop
 */
	
	/**
	 * [tDie_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_begin ] stop
 */
	
	/**
	 * [tDie_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 process_data_end ] stop
 */
	
	/**
	 * [tDie_4 end ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 

ok_Hash.put("tDie_4", true);
end_Hash.put("tDie_4", System.currentTimeMillis());




/**
 * [tDie_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_4 finally ] start
	 */

	

	
	
	currentComponent="tDie_4";

	

 



/**
 * [tDie_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_4_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableComparableLookupRow<row3Struct> {
    final static byte[] commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
    static byte[] commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int MATERIAL_ID;

				public int getMATERIAL_ID () {
					return this.MATERIAL_ID;
				}
				
			    public String MATERIAL_NO_UNIQUE;

				public String getMATERIAL_NO_UNIQUE () {
					return this.MATERIAL_NO_UNIQUE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.MATERIAL_NO_UNIQUE == null) ? 0 : this.MATERIAL_NO_UNIQUE.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row3Struct other = (row3Struct) obj;
		
						if (this.MATERIAL_NO_UNIQUE == null) {
							if (other.MATERIAL_NO_UNIQUE != null)
								return false;
						
						} else if (!this.MATERIAL_NO_UNIQUE.equals(other.MATERIAL_NO_UNIQUE))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row3Struct other) {

		other.MATERIAL_ID = this.MATERIAL_ID;
	            other.MATERIAL_NO_UNIQUE = this.MATERIAL_NO_UNIQUE;
	            
	}

	public void copyKeysDataTo(row3Struct other) {

		other.MATERIAL_NO_UNIQUE = this.MATERIAL_NO_UNIQUE;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length) {
				if(length < 1024 && commonByteArray_ODS_MATERIAL_SCRAP_Main_Template.length == 0) {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[1024];
				} else {
   					commonByteArray_ODS_MATERIAL_SCRAP_Main_Template = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length);
			strReturn = new String(commonByteArray_ODS_MATERIAL_SCRAP_Main_Template, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
					this.MATERIAL_NO_UNIQUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ODS_MATERIAL_SCRAP_Main_Template) {

        	try {

        		int length = 0;
		
					this.MATERIAL_NO_UNIQUE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.MATERIAL_NO_UNIQUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.MATERIAL_NO_UNIQUE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.MATERIAL_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.MATERIAL_ID = objectIn.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.MATERIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.MATERIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MATERIAL_ID="+String.valueOf(MATERIAL_ID));
		sb.append(",MATERIAL_NO_UNIQUE="+MATERIAL_NO_UNIQUE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.MATERIAL_NO_UNIQUE, other.MATERIAL_NO_UNIQUE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tAdvancedHash_row3 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row3", false);
		start_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAdvancedHash_row3 = 0;
		

			   		// connection name:row3
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row3,row3) | target node:tAdvancedHash_row3 - inputs:(row3) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row3) outputs:(Insert)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row3 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row3Struct> tHash_Lookup_row3 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row3Struct>getLookup(matchingModeEnum_row3);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row3", tHash_Lookup_row3);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row3 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT [MATERIAL_ID]\n		,[MATERIAL_NO_UNIQUE]\nFROM [DIM_MATERIAL_MATERIAL]\n";
		    

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row3.MATERIAL_ID = 0;
							} else {
		                          
            row3.MATERIAL_ID = rs_tDBInput_2.getInt(1);
            if(rs_tDBInput_2.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row3.MATERIAL_NO_UNIQUE = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.MATERIAL_NO_UNIQUE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row3.MATERIAL_NO_UNIQUE = tmpContent_tDBInput_2;
                }
            } else {
                row3.MATERIAL_NO_UNIQUE = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


			   
			   

					row3Struct row3_HashRow = new row3Struct();
		   	   	   
				
				row3_HashRow.MATERIAL_ID = row3.MATERIAL_ID;
				
				row3_HashRow.MATERIAL_NO_UNIQUE = row3.MATERIAL_NO_UNIQUE;
				
			tHash_Lookup_row3.put(row3_HashRow);
			
            




 


	tos_count_tAdvancedHash_row3++;

/**
 * [tAdvancedHash_row3 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row3 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

tHash_Lookup_row3.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row3", true);
end_Hash.put("tAdvancedHash_row3", System.currentTimeMillis());




/**
 * [tAdvancedHash_row3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row3 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row3";

	

 



/**
 * [tAdvancedHash_row3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "DEPLOYMENT";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Main_Template Main_TemplateClass = new Main_Template();

        int exitCode = Main_TemplateClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        if (inOSGi) {
            java.util.Dictionary<String, Object> jobProperties = routines.system.BundleUtils.getJobProperties(jobName);

            if (jobProperties != null && jobProperties.get("context") != null) {
                contextStr = (String)jobProperties.get("context");
            }
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Main_Template.class.getClassLoader().getResourceAsStream("ods_material_scrap/main_template_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Main_Template.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("FileName", "id_String");
                        if(context.getStringValue("FileName") == null) {
                            context.FileName = null;
                        } else {
                            context.FileName=(String) context.getProperty("FileName");
                        }
                        context.setContextType("DestinationPath", "id_String");
                        if(context.getStringValue("DestinationPath") == null) {
                            context.DestinationPath = null;
                        } else {
                            context.DestinationPath=(String) context.getProperty("DestinationPath");
                        }
                        context.setContextType("BusinessFolder", "id_String");
                        if(context.getStringValue("BusinessFolder") == null) {
                            context.BusinessFolder = null;
                        } else {
                            context.BusinessFolder=(String) context.getProperty("BusinessFolder");
                        }
                        context.setContextType("InitFlag", "id_String");
                        if(context.getStringValue("InitFlag") == null) {
                            context.InitFlag = null;
                        } else {
                            context.InitFlag=(String) context.getProperty("InitFlag");
                        }
                        context.setContextType("FileDateTime", "id_String");
                        if(context.getStringValue("FileDateTime") == null) {
                            context.FileDateTime = null;
                        } else {
                            context.FileDateTime=(String) context.getProperty("FileDateTime");
                        }
                        context.setContextType("DB_SQLServer_DWH_AdditionalParams", "id_String");
                        if(context.getStringValue("DB_SQLServer_DWH_AdditionalParams") == null) {
                            context.DB_SQLServer_DWH_AdditionalParams = null;
                        } else {
                            context.DB_SQLServer_DWH_AdditionalParams=(String) context.getProperty("DB_SQLServer_DWH_AdditionalParams");
                        }
                        context.setContextType("DB_SQLServer_DWH_Database", "id_String");
                        if(context.getStringValue("DB_SQLServer_DWH_Database") == null) {
                            context.DB_SQLServer_DWH_Database = null;
                        } else {
                            context.DB_SQLServer_DWH_Database=(String) context.getProperty("DB_SQLServer_DWH_Database");
                        }
                        context.setContextType("DB_SQLServer_DWH_Login", "id_String");
                        if(context.getStringValue("DB_SQLServer_DWH_Login") == null) {
                            context.DB_SQLServer_DWH_Login = null;
                        } else {
                            context.DB_SQLServer_DWH_Login=(String) context.getProperty("DB_SQLServer_DWH_Login");
                        }
                        context.setContextType("DB_SQLServer_DWH_Password", "id_Password");
                        if(context.getStringValue("DB_SQLServer_DWH_Password") == null) {
                            context.DB_SQLServer_DWH_Password = null;
                        } else {
                            String pwd_DB_SQLServer_DWH_Password_value = context.getProperty("DB_SQLServer_DWH_Password");
                            context.DB_SQLServer_DWH_Password = null;
                            if(pwd_DB_SQLServer_DWH_Password_value!=null) {
                                if(context_param.containsKey("DB_SQLServer_DWH_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.DB_SQLServer_DWH_Password = pwd_DB_SQLServer_DWH_Password_value;
                                } else if (!pwd_DB_SQLServer_DWH_Password_value.isEmpty()) {
                                    try {
                                        context.DB_SQLServer_DWH_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_DB_SQLServer_DWH_Password_value);
                                        context.put("DB_SQLServer_DWH_Password",context.DB_SQLServer_DWH_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("DB_SQLServer_DWH_Port", "id_String");
                        if(context.getStringValue("DB_SQLServer_DWH_Port") == null) {
                            context.DB_SQLServer_DWH_Port = null;
                        } else {
                            context.DB_SQLServer_DWH_Port=(String) context.getProperty("DB_SQLServer_DWH_Port");
                        }
                        context.setContextType("DB_SQLServer_DWH_Schema", "id_String");
                        if(context.getStringValue("DB_SQLServer_DWH_Schema") == null) {
                            context.DB_SQLServer_DWH_Schema = null;
                        } else {
                            context.DB_SQLServer_DWH_Schema=(String) context.getProperty("DB_SQLServer_DWH_Schema");
                        }
                        context.setContextType("DB_SQLServer_DWH_Server", "id_String");
                        if(context.getStringValue("DB_SQLServer_DWH_Server") == null) {
                            context.DB_SQLServer_DWH_Server = null;
                        } else {
                            context.DB_SQLServer_DWH_Server=(String) context.getProperty("DB_SQLServer_DWH_Server");
                        }
                        context.setContextType("DB_SQLServer_PLEX_AdditionalParams", "id_String");
                        if(context.getStringValue("DB_SQLServer_PLEX_AdditionalParams") == null) {
                            context.DB_SQLServer_PLEX_AdditionalParams = null;
                        } else {
                            context.DB_SQLServer_PLEX_AdditionalParams=(String) context.getProperty("DB_SQLServer_PLEX_AdditionalParams");
                        }
                        context.setContextType("DB_SQLServer_PLEX_Database", "id_String");
                        if(context.getStringValue("DB_SQLServer_PLEX_Database") == null) {
                            context.DB_SQLServer_PLEX_Database = null;
                        } else {
                            context.DB_SQLServer_PLEX_Database=(String) context.getProperty("DB_SQLServer_PLEX_Database");
                        }
                        context.setContextType("DB_SQLServer_PLEX_Login", "id_String");
                        if(context.getStringValue("DB_SQLServer_PLEX_Login") == null) {
                            context.DB_SQLServer_PLEX_Login = null;
                        } else {
                            context.DB_SQLServer_PLEX_Login=(String) context.getProperty("DB_SQLServer_PLEX_Login");
                        }
                        context.setContextType("DB_SQLServer_PLEX_Password", "id_Password");
                        if(context.getStringValue("DB_SQLServer_PLEX_Password") == null) {
                            context.DB_SQLServer_PLEX_Password = null;
                        } else {
                            String pwd_DB_SQLServer_PLEX_Password_value = context.getProperty("DB_SQLServer_PLEX_Password");
                            context.DB_SQLServer_PLEX_Password = null;
                            if(pwd_DB_SQLServer_PLEX_Password_value!=null) {
                                if(context_param.containsKey("DB_SQLServer_PLEX_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.DB_SQLServer_PLEX_Password = pwd_DB_SQLServer_PLEX_Password_value;
                                } else if (!pwd_DB_SQLServer_PLEX_Password_value.isEmpty()) {
                                    try {
                                        context.DB_SQLServer_PLEX_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_DB_SQLServer_PLEX_Password_value);
                                        context.put("DB_SQLServer_PLEX_Password",context.DB_SQLServer_PLEX_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("DB_SQLServer_PLEX_Port", "id_String");
                        if(context.getStringValue("DB_SQLServer_PLEX_Port") == null) {
                            context.DB_SQLServer_PLEX_Port = null;
                        } else {
                            context.DB_SQLServer_PLEX_Port=(String) context.getProperty("DB_SQLServer_PLEX_Port");
                        }
                        context.setContextType("DB_SQLServer_PLEX_Schema", "id_String");
                        if(context.getStringValue("DB_SQLServer_PLEX_Schema") == null) {
                            context.DB_SQLServer_PLEX_Schema = null;
                        } else {
                            context.DB_SQLServer_PLEX_Schema=(String) context.getProperty("DB_SQLServer_PLEX_Schema");
                        }
                        context.setContextType("DB_SQLServer_PLEX_Server", "id_String");
                        if(context.getStringValue("DB_SQLServer_PLEX_Server") == null) {
                            context.DB_SQLServer_PLEX_Server = null;
                        } else {
                            context.DB_SQLServer_PLEX_Server=(String) context.getProperty("DB_SQLServer_PLEX_Server");
                        }
                        context.setContextType("CurrentDate", "id_String");
                        if(context.getStringValue("CurrentDate") == null) {
                            context.CurrentDate = null;
                        } else {
                            context.CurrentDate=(String) context.getProperty("CurrentDate");
                        }
                        context.setContextType("EndDate", "id_String");
                        if(context.getStringValue("EndDate") == null) {
                            context.EndDate = null;
                        } else {
                            context.EndDate=(String) context.getProperty("EndDate");
                        }
                        context.setContextType("ErrorDate", "id_String");
                        if(context.getStringValue("ErrorDate") == null) {
                            context.ErrorDate = null;
                        } else {
                            context.ErrorDate=(String) context.getProperty("ErrorDate");
                        }
                        context.setContextType("NbDayExtract", "id_String");
                        if(context.getStringValue("NbDayExtract") == null) {
                            context.NbDayExtract = null;
                        } else {
                            context.NbDayExtract=(String) context.getProperty("NbDayExtract");
                        }
                        context.setContextType("StartDate", "id_String");
                        if(context.getStringValue("StartDate") == null) {
                            context.StartDate = null;
                        } else {
                            context.StartDate=(String) context.getProperty("StartDate");
                        }
                        context.setContextType("TALEND_CONF_Directory", "id_String");
                        if(context.getStringValue("TALEND_CONF_Directory") == null) {
                            context.TALEND_CONF_Directory = null;
                        } else {
                            context.TALEND_CONF_Directory=(String) context.getProperty("TALEND_CONF_Directory");
                        }
                        context.setContextType("TALEND_CONF_FileName", "id_String");
                        if(context.getStringValue("TALEND_CONF_FileName") == null) {
                            context.TALEND_CONF_FileName = null;
                        } else {
                            context.TALEND_CONF_FileName=(String) context.getProperty("TALEND_CONF_FileName");
                        }
                        context.setContextType("TALEND_CONF_FileSeparator", "id_String");
                        if(context.getStringValue("TALEND_CONF_FileSeparator") == null) {
                            context.TALEND_CONF_FileSeparator = null;
                        } else {
                            context.TALEND_CONF_FileSeparator=(String) context.getProperty("TALEND_CONF_FileSeparator");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("FileName")) {
                context.FileName = (String) parentContextMap.get("FileName");
            }if (parentContextMap.containsKey("DestinationPath")) {
                context.DestinationPath = (String) parentContextMap.get("DestinationPath");
            }if (parentContextMap.containsKey("BusinessFolder")) {
                context.BusinessFolder = (String) parentContextMap.get("BusinessFolder");
            }if (parentContextMap.containsKey("InitFlag")) {
                context.InitFlag = (String) parentContextMap.get("InitFlag");
            }if (parentContextMap.containsKey("FileDateTime")) {
                context.FileDateTime = (String) parentContextMap.get("FileDateTime");
            }if (parentContextMap.containsKey("DB_SQLServer_DWH_AdditionalParams")) {
                context.DB_SQLServer_DWH_AdditionalParams = (String) parentContextMap.get("DB_SQLServer_DWH_AdditionalParams");
            }if (parentContextMap.containsKey("DB_SQLServer_DWH_Database")) {
                context.DB_SQLServer_DWH_Database = (String) parentContextMap.get("DB_SQLServer_DWH_Database");
            }if (parentContextMap.containsKey("DB_SQLServer_DWH_Login")) {
                context.DB_SQLServer_DWH_Login = (String) parentContextMap.get("DB_SQLServer_DWH_Login");
            }if (parentContextMap.containsKey("DB_SQLServer_DWH_Password")) {
                context.DB_SQLServer_DWH_Password = (java.lang.String) parentContextMap.get("DB_SQLServer_DWH_Password");
            }if (parentContextMap.containsKey("DB_SQLServer_DWH_Port")) {
                context.DB_SQLServer_DWH_Port = (String) parentContextMap.get("DB_SQLServer_DWH_Port");
            }if (parentContextMap.containsKey("DB_SQLServer_DWH_Schema")) {
                context.DB_SQLServer_DWH_Schema = (String) parentContextMap.get("DB_SQLServer_DWH_Schema");
            }if (parentContextMap.containsKey("DB_SQLServer_DWH_Server")) {
                context.DB_SQLServer_DWH_Server = (String) parentContextMap.get("DB_SQLServer_DWH_Server");
            }if (parentContextMap.containsKey("DB_SQLServer_PLEX_AdditionalParams")) {
                context.DB_SQLServer_PLEX_AdditionalParams = (String) parentContextMap.get("DB_SQLServer_PLEX_AdditionalParams");
            }if (parentContextMap.containsKey("DB_SQLServer_PLEX_Database")) {
                context.DB_SQLServer_PLEX_Database = (String) parentContextMap.get("DB_SQLServer_PLEX_Database");
            }if (parentContextMap.containsKey("DB_SQLServer_PLEX_Login")) {
                context.DB_SQLServer_PLEX_Login = (String) parentContextMap.get("DB_SQLServer_PLEX_Login");
            }if (parentContextMap.containsKey("DB_SQLServer_PLEX_Password")) {
                context.DB_SQLServer_PLEX_Password = (java.lang.String) parentContextMap.get("DB_SQLServer_PLEX_Password");
            }if (parentContextMap.containsKey("DB_SQLServer_PLEX_Port")) {
                context.DB_SQLServer_PLEX_Port = (String) parentContextMap.get("DB_SQLServer_PLEX_Port");
            }if (parentContextMap.containsKey("DB_SQLServer_PLEX_Schema")) {
                context.DB_SQLServer_PLEX_Schema = (String) parentContextMap.get("DB_SQLServer_PLEX_Schema");
            }if (parentContextMap.containsKey("DB_SQLServer_PLEX_Server")) {
                context.DB_SQLServer_PLEX_Server = (String) parentContextMap.get("DB_SQLServer_PLEX_Server");
            }if (parentContextMap.containsKey("CurrentDate")) {
                context.CurrentDate = (String) parentContextMap.get("CurrentDate");
            }if (parentContextMap.containsKey("EndDate")) {
                context.EndDate = (String) parentContextMap.get("EndDate");
            }if (parentContextMap.containsKey("ErrorDate")) {
                context.ErrorDate = (String) parentContextMap.get("ErrorDate");
            }if (parentContextMap.containsKey("NbDayExtract")) {
                context.NbDayExtract = (String) parentContextMap.get("NbDayExtract");
            }if (parentContextMap.containsKey("StartDate")) {
                context.StartDate = (String) parentContextMap.get("StartDate");
            }if (parentContextMap.containsKey("TALEND_CONF_Directory")) {
                context.TALEND_CONF_Directory = (String) parentContextMap.get("TALEND_CONF_Directory");
            }if (parentContextMap.containsKey("TALEND_CONF_FileName")) {
                context.TALEND_CONF_FileName = (String) parentContextMap.get("TALEND_CONF_FileName");
            }if (parentContextMap.containsKey("TALEND_CONF_FileSeparator")) {
                context.TALEND_CONF_FileSeparator = (String) parentContextMap.get("TALEND_CONF_FileSeparator");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("DB_SQLServer_DWH_Password");
			parametersToEncrypt.add("DB_SQLServer_PLEX_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tJava_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tJava_2) {
globalMap.put("tJava_2_SUBPROCESS_STATE", -1);

e_tJava_2.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Main_Template");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     259285 characters generated by Talend Open Studio for Data Integration 
 *     on the July 10, 2024 at 9:51:09 AM CDT
 ************************************************************************************************/