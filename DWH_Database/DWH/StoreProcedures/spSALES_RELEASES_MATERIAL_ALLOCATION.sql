CREATE PROCEDURE [dbo].[spSALES_RELEASES_MATERIAL_ALLOCATION]
AS
	DECLARE @SITECODE AS VARCHAR(50) = 'ALL';
DECLARE @SNAPSHOT_DATE AS DATE = CAST(GETDATE() AS DATE);
DECLARE @ASSYNO AS VARCHAR(50) = 'ALL';
DECLARE @ONLYDEMAND AS VARCHAR(50) = 'NO';
DECLARE @CUSTOMER_CODE AS VARCHAR(50) = 'ALL';
DECLARE @ONLYACTIVE AS VARCHAR(50) = '1';

-- FIELD FOR CURSOR
DECLARE 
@CALENDAR_DATE DATE,
-- FOR OPEN_RELEASES
@OR_ORGANIZATIONLVL3ID INT, 
@OR_MATERIAL_ID INT, 
@OR_DUE_DATE DATE, 
@OR_QUANTITY DECIMAL(18,6),

-- FOR SALES RELEASES
@ORGANIZATIONLVL3ID INT, 
@MATERIAL_ID INT, 
@DUE_DATE DATE, 
@QUANTITY DECIMAL(18,6),
-- 
@COMPONENT_MATERIAL_ID INT,  
@BOM_QUANTITY DECIMAL(18,6),
@RELEASE_ID INT, 
@PO_LINE_KEY INT, 
@TotalRequiredQuantity DECIMAL(18,6),
@AvailableQuantity  DECIMAL(18,6) 

-- Temporal Inventory Table
CREATE TABLE #MATERIA_INVENTORY(
[ORGANIZATIONLVL3ID] INT,
[MATERIAL_ID] INT,
[QUANTITY] DECIMAL(18,6),
[UNIT_COST] DECIMAL(18,6)
)

INSERT #MATERIA_INVENTORY(
[ORGANIZATIONLVL3ID],
[MATERIAL_ID],
[QUANTITY],
[UNIT_COST]
)
SELECT 
	[ORGANIZATIONLVL3ID],
	[MATERIAL_ID],
	SUM([QUANTITY]) AS [QUANTITY],
	MAX([UNIT_COST]) AS [UNIT_COST]
FROM [ODS_MATERIAL_INVENTORY]
WHERE [TRNDATE] = @SNAPSHOT_DATE
GROUP BY 	[ORGANIZATIONLVL3ID],
			[MATERIAL_ID]

-- Temporal PURCHASE RELEASES Table
CREATE TABLE #OPEN_ORDERS(
[ORGANIZATIONLVL3ID] INT,
[MATERIAL_ID] INT,
[QUANTITY] DECIMAL(18,6),
[DUE_DATE] DATE
)

INSERT #OPEN_ORDERS(
[ORGANIZATIONLVL3ID],
[MATERIAL_ID],
[QUANTITY],
[DUE_DATE]
)
SELECT [ORGANIZATIONLVL3ID]
      ,[MATERIAL_ID]
	  ,SUM(QUANTITY) AS QUANTITY
	  ,[DUE_DATE]
  FROM [ODS_PURCHASE_RELEASE]
  WHERE SNAPSHOT_DATE=@SNAPSHOT_DATE
  GROUP BY [ORGANIZATIONLVL3ID]
      ,[MATERIAL_ID]
	  ,[DUE_DATE]

-- Temporal Release Table

CREATE TABLE #RELEASES_STATUS(
[ORGANIZATIONLVL3ID] INT,
[MATERIAL_ID] INT,
[RELEASE_ID] INT,
[PO_LINE_KEY] INT,
[ARBITRATION] BIT,
[DUE_DATE] DATE,
[QUANTITY] DECIMAL(18,6),
[QUANTITY_ALLOCATED] DECIMAL(18,6)
)

INSERT #RELEASES_STATUS (
[ORGANIZATIONLVL3ID],
[MATERIAL_ID],
[RELEASE_ID],
[PO_LINE_KEY],
[ARBITRATION],
[DUE_DATE],
[QUANTITY],
[QUANTITY_ALLOCATED]
)
SELECT [ORGANIZATIONLVL3ID]
	  ,[MATERIAL_ID]
      ,[RELEASE_ID]
      ,[PO_LINE_KEY]
	  ,0
	  ,CASE WHEN [DUE_DATE]<@SNAPSHOT_DATE THEN DATEADD(DAY,-1,@SNAPSHOT_DATE) ELSE [DUE_DATE] END AS [DUE_DATE]
	  ,[QUANTITY]
	  ,0
  FROM [ODS_SALES_RELEASE]
  WHERE SNAPSHOT_DATE = @SNAPSHOT_DATE
  ORDER BY DUE_DATE ASC

-- TEMPORAL BOM
CREATE TABLE #BOM(
[ORGANIZATIONLVL3ID] INT,
[MATERIAL_ID] INT,
[COMPONENT_MATERIAL_ID] INT,
[BOM_QUANTITY] DECIMAL(18,6)
)

INSERT #BOM (
[ORGANIZATIONLVL3ID] ,
[MATERIAL_ID] ,
[COMPONENT_MATERIAL_ID] ,
[BOM_QUANTITY] 
)
SELECT        OMB.ORGANIZATIONLVL3ID, OMB.MATERIAL_ID,OMB.COMPONENT_MATERIAL_ID, SUM(OMB.BOM_QUANTITY) AS BOM_QUANTITY
FROM            ODS_MATERIAL_BOM AS OMB INNER JOIN
                         DIM_MATERIAL_MATERIAL_ATTRIBUTES ON OMB.COMPONENT_MATERIAL_ID = DIM_MATERIAL_MATERIAL_ATTRIBUTES.MATERIAL_ID 
						 INNER JOIN
                         DIM_MATERIAL_MATERIAL_FAMILY ON DIM_MATERIAL_MATERIAL_ATTRIBUTES.MATERIAL_FAMILY_ID = DIM_MATERIAL_MATERIAL_FAMILY.MATERIAL_FAMILY_ID 
						 INNER JOIN
                         DIM_MATERIAL_MATERIAL_TYPE ON DIM_MATERIAL_MATERIAL_ATTRIBUTES.MATERIAL_TYPE_ID = DIM_MATERIAL_MATERIAL_TYPE.MATERIAL_TYPE_ID 
						 INNER JOIN
                         DIM_MATERIAL_MATERIAL ON OMB.MATERIAL_ID = DIM_MATERIAL_MATERIAL.MATERIAL_ID
WHERE DIM_MATERIAL_MATERIAL_TYPE.MATERIAL_TYPE='Purchased'
GROUP BY OMB.ORGANIZATIONLVL3ID, OMB.MATERIAL_ID,OMB.COMPONENT_MATERIAL_ID

-- TEMPORAL CALENDAR
CREATE TABLE #CALENDAR_PERIOD(
[CALENDAR_DATE] DATE
)

INSERT #CALENDAR_PERIOD ([CALENDAR_DATE])
SELECT [CALENDAR_DATE] FROM [dbo].[DIM_CALENDAR] WHERE [CALENDAR_DATE] between DATEADD(DAY,-1,@SNAPSHOT_DATE) AND DATEADD(MONTH,+4,@SNAPSHOT_DATE)

-- CURSOR

DECLARE dateCursor CURSOR FOR
SELECT [CALENDAR_DATE]
FROM #CALENDAR_PERIOD
ORDER BY [CALENDAR_DATE] ASC

OPEN dateCursor

FETCH NEXT FROM dateCursor INTO @CALENDAR_DATE

WHILE @@FETCH_STATUS = 0
BEGIN

	--SUM OPEN RELEASES PREV TO DAY AND MORE THAN 0
	DECLARE  openRelease CURSOR FOR
	SELECT [ORGANIZATIONLVL3ID],[MATERIAL_ID],[QUANTITY],[DUE_DATE]
	FROM #OPEN_ORDERS WHERE [DUE_DATE]<=@CALENDAR_DATE AND QUANTITY>0

	OPEN openRelease

    -- Fetch the first material required for the product
    FETCH NEXT FROM openRelease INTO @OR_ORGANIZATIONLVL3ID, @OR_MATERIAL_ID,@OR_QUANTITY,@OR_DUE_DATE

	WHILE @@FETCH_STATUS = 0
	BEGIN
		
		-- REDUCE FROM OPEN RELEASES
		UPDATE #OPEN_ORDERS
        SET [QUANTITY] = 0
        WHERE [ORGANIZATIONLVL3ID]=@OR_ORGANIZATIONLVL3ID AND Material_ID = @OR_MATERIAL_ID
				AND [DUE_DATE]=@OR_DUE_DATE

        -- SUM RELEASE TO INVENTORY
        UPDATE #MATERIA_INVENTORY
        SET [QUANTITY] = [QUANTITY] + @OR_QUANTITY
        WHERE [ORGANIZATIONLVL3ID]=@OR_ORGANIZATIONLVL3ID AND Material_ID = @OR_MATERIAL_ID


		-- Move to the next job
		FETCH NEXT FROM openRelease INTO @OR_ORGANIZATIONLVL3ID, @OR_MATERIAL_ID,@OR_QUANTITY,@OR_DUE_DATE
	END

	--SEARCH RELEASES WITH THIS DUE_DATE	
	DECLARE SaleReleaseCursor CURSOR FOR
	SELECT [ORGANIZATIONLVL3ID], [MATERIAL_ID], [RELEASE_ID],[PO_LINE_KEY],[DUE_DATE],[QUANTITY]
	FROM #RELEASES_STATUS WHERE [DUE_DATE]=@CALENDAR_DATE
	ORDER BY [DUE_DATE] ASC

	OPEN SaleReleaseCursor

	-- Fetch the first job
	FETCH NEXT FROM SaleReleaseCursor INTO @ORGANIZATIONLVL3ID, @MATERIAL_ID, @RELEASE_ID,@PO_LINE_KEY,@DUE_DATE,@QUANTITY

	-- Loop through all jobs
	WHILE @@FETCH_STATUS = 0
	BEGIN
		-- Reduce material shipped. 
		DECLARE @Materila_Shipped DECIMAL(18,6) = 0
		DECLARE @ORIGINAL_QUANTITY DECIMAL(18,6) = @QUANTITY

		SET @Materila_Shipped =  (SELECT ISNULL(SUM([QUANTITY]),0) 
		  FROM [PROD_DWH].[dbo].[ODS_SALES_DELIVERY]
		  WHERE [ORGANIZATIONLVL3ID]=@ORGANIZATIONLVL3ID
		  AND [PO_LINE_KEY]=@PO_LINE_KEY
		  AND [RELEASE_ID] =@RELEASE_ID)

		SET @QUANTITY = @QUANTITY - @Materila_Shipped

		DECLARE @MaterialSufficient BIT = 1 -- Assume materials are sufficient for this job
    
		-- Inner cursor to check each material required for the job based on the BOM
		DECLARE MaterialCursor CURSOR FOR
		SELECT BOM.COMPONENT_MATERIAL_ID, BOM.BOM_QUANTITY
		FROM #BOM BOM
		WHERE BOM.Material_ID = @MATERIAL_ID

		OPEN MaterialCursor

		-- Fetch the first material required for the product
		FETCH NEXT FROM MaterialCursor INTO @COMPONENT_MATERIAL_ID, @BOM_QUANTITY

		-- Loop through all materials required by the BOM
		WHILE @@FETCH_STATUS = 0
		BEGIN
			-- Calculate the total required quantity of the material for the job
			SET @TotalRequiredQuantity = @BOM_QUANTITY * @QUANTITY

			-- Get the available quantity of this material from the inventory
			SELECT @AvailableQuantity = QUANTITY
			FROM #MATERIA_INVENTORY
			WHERE Material_ID = @COMPONENT_MATERIAL_ID

			-- Check if there is enough material to fulfill this job
			IF @AvailableQuantity < @TotalRequiredQuantity
			BEGIN
				-- UPDATE THE QUANTITY TO THE AVAILABILITY
				SET @QUANTITY = FLOOR( @AvailableQuantity / @BOM_QUANTITY)
			END

			IF @QUANTITY = 0
			BEGIN
				BREAK
			END

			-- Fetch the next material
			FETCH NEXT FROM MaterialCursor INTO @COMPONENT_MATERIAL_ID, @BOM_QUANTITY
		END

		CLOSE MaterialCursor
		DEALLOCATE MaterialCursor

		-- If all materials are sufficient, allocate and reduce the inventory
		IF @MaterialSufficient = 1
		BEGIN
			-- Update inventory by reducing the allocated materials
			DECLARE MaterialUpdateCursor CURSOR FOR
			SELECT BOM.COMPONENT_MATERIAL_ID, BOM.BOM_QUANTITY
			FROM #BOM BOM
			WHERE BOM.Material_ID = @MATERIAL_ID

			OPEN MaterialUpdateCursor

			FETCH NEXT FROM MaterialUpdateCursor INTO @COMPONENT_MATERIAL_ID, @BOM_QUANTITY

			-- Loop through again and reduce the material from the inventory
			WHILE @@FETCH_STATUS = 0
			BEGIN
				-- Calculate total required quantity
				SET @TotalRequiredQuantity = @BOM_QUANTITY * @QUANTITY

				-- Reduce the available quantity in the inventory
				UPDATE #MATERIA_INVENTORY
				SET [QUANTITY] = [QUANTITY] - @TotalRequiredQuantity
				WHERE Material_ID = @COMPONENT_MATERIAL_ID

				-- Fetch next material
				FETCH NEXT FROM MaterialUpdateCursor INTO @COMPONENT_MATERIAL_ID, @BOM_QUANTITY
			END

			CLOSE MaterialUpdateCursor
			DEALLOCATE MaterialUpdateCursor

			UPDATE #RELEASES_STATUS
			SET [QUANTITY_ALLOCATED] = @QUANTITY,
			[QUANTITY] = @ORIGINAL_QUANTITY
			WHERE [ORGANIZATIONLVL3ID] =@ORGANIZATIONLVL3ID AND
			[MATERIAL_ID] =@MATERIAL_ID AND
			[RELEASE_ID] = @RELEASE_ID AND 
			[PO_LINE_KEY] =@PO_LINE_KEY
		END

		-- Move to the next job
		FETCH NEXT FROM SaleReleaseCursor INTO @ORGANIZATIONLVL3ID, @MATERIAL_ID, @RELEASE_ID,@PO_LINE_KEY,@DUE_DATE,@QUANTITY
	END

	-- Clean up
	CLOSE SaleReleaseCursor
	DEALLOCATE SaleReleaseCursor

	FETCH NEXT FROM dateCursor INTO @CALENDAR_DATE
END

CLOSE dateCursor
DEALLOCATE dateCursor

-- MAIN QUERY
;WITH SALES_PRICE AS (
SELECT [ORGANIZATIONLVL3ID]
      ,[MATERIAL_ID]
      ,[SALES_PO_PRICE]
      ,[SALES_PO_NO]
      ,[SNAPSHOT_DATE]
  FROM [dbo].[ODS_MATERIAL_COST_PRICE] WHERE SNAPSHOT_DATE = @SNAPSHOT_DATE
)

INSERT INTO [dbo].[ODS_SALES_RELEASE_PROJECTION]
           ([ORGANIZATIONLVL3ID]
           ,[MATERIAL_ID]
           ,[RELEASE_ID]
           ,[PO_LINE_KEY]
           ,[DUE_DATE]
           ,[QUANTITY]
           ,[QUANTITY_ARBITRATION]
           ,[QUANTITY_ALLOCATED]
           ,[SNAPSHOT_DATE])
SELECT
           [ORGANIZATIONLVL3ID]
           ,[MATERIAL_ID]
           ,[RELEASE_ID]
           ,[PO_LINE_KEY]
           ,[DUE_DATE]
           ,[QUANTITY]
           ,[QUANTITY] AS [QUANTITY_ARBITRATION]
           ,[QUANTITY_ALLOCATED]
           ,@SNAPSHOT_DATE as [SNAPSHOT_DATE] FROM #RELEASES_STATUS

DROP TABLE #MATERIA_INVENTORY
DROP TABLE #RELEASES_STATUS
DROP TABLE #BOM
DROP TABLE #OPEN_ORDERS
DROP TABLE #CALENDAR_PERIOD
RETURN 0
